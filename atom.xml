<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ONLYCTRLCV</title>
  
  <subtitle>经乱离后天恩流夜郎忆旧游书怀赠江夏韦太守良宰</subtitle>
  <link href="https://262617.xyz/atom.xml" rel="self"/>
  
  <link href="https://262617.xyz/"/>
  <updated>2024-01-29T07:42:45.044Z</updated>
  <id>https://262617.xyz/</id>
  
  <author>
    <name>ZhiQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++模板编程</title>
    <link href="https://262617.xyz/20240119/kai-shi-xue-xi-c/c/"/>
    <id>https://262617.xyz/20240119/kai-shi-xue-xi-c/c/</id>
    <published>2024-01-19T03:45:46.000Z</published>
    <updated>2024-01-29T07:42:45.044Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gcore.jsdelivr.net/gh/chauity/xximgxx/mindmap/C++%E6%A8%A1%E6%9D%BF.html">本篇文章脑图地址</a></p><h1 id="C-模板编程"><a href="#C-模板编程" class="headerlink" title="C++模板编程"></a>C++模板编程</h1><h2 id="C-函数模板"><a href="#C-函数模板" class="headerlink" title="C++函数模板"></a>C++函数模板</h2><h3 id="函数模板的概念"><a href="#函数模板的概念" class="headerlink" title="函数模板的概念"></a>函数模板的概念</h3><blockquote><p>函数模板是用于生成函数的模板。在编译阶段，编译器会根据函数模板的使用情况创建出函数名相同，参数类型由编译器判断的若干函数。<br>&nbsp;通过函数模板创建的函数体相同，不同点在于参数类型。</p></blockquote><h3 id="函数模板的使用"><a href="#函数模板的使用" class="headerlink" title="函数模板的使用"></a>函数模板的使用</h3><blockquote><p>每当在一个编译单元（经过预处理的.cpp文件）中使用了函数模板，则必须在该单元中定义一个与函数模板相对应的函数。<br>&nbsp;因此，建议在头文件中对函数模板进行声明定义。</p></blockquote><h4 id="函数模板的声明"><a href="#函数模板的声明" class="headerlink" title="函数模板的声明:"></a>函数模板的声明:</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename T&gt; &#x2F;&#x2F; 其中T表示任意类型，参数类型和返回值都可以指定为T返回类型 函数名(参数列表);&#123;  函数体&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><ol><li>新建一个头文件<code>template.h</code>,文件内容如下：<pre class="line-numbers language-h" data-language="h"><code class="language-h">#pragma once#ifndef _COMPARE_H#define _COMPARE_Htemplate&lt;typename T&gt;bool isEqual(T i, T j);template&lt;typename T&gt;bool isEqual(T i, T j)&#123;return i &#x3D;&#x3D; j;&#125;#endif &#x2F;&#x2F; !_COMPARE_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>新建<code>main.cpp</code>,在<code>main.cpp</code>中使用函数模板：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"compare.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token string">"TTT"</span><span class="token punctuation">,</span> <span class="token string">"TTT"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>编译运行<code>main.cpp</code>，效果如下<pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">10011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="函数模板的特化"><a href="#函数模板的特化" class="headerlink" title="函数模板的特化"></a>函数模板的特化</h3><blockquote><p>函数模板的特化是指在实例化模板时，对特定类型的实参进行特殊处理，即当实参为特定类型时，使用该类型的函数体。<br>&nbsp;特化需要为函数模板添加新的定义，方式如下</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">></span>返回类型 函数名<span class="token operator">&lt;</span>具体类型<span class="token operator">></span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   函数体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><ol><li>修改<code>main.cpp</code>文件，修改成如下代码：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"compare.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEqual</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Equal"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not Equal"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>编译运行<code>main.cpp</code>，效果如下<pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">Not Equal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>为什么两个明明是相同类型和字符数相同的字符串，却返回了<code>Not Equal</code>呢？</li></ol><ul><li>原来是<code>isEqual</code>函数模板在比较字符串时，默认使用<code>==</code>运算符，而<code>==</code>运算符比较的是字符串的地址，所以返回了<code>Not Equal</code>。</li><li>字符串内容比较，应该使用<code>strcmp函数</code>。</li></ul><ol start="3"><li><p>修改<code>compare.h</code>文件，添加如下代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token generic-function"><span class="token function">isEqual</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译运行<code>main.cpp</code>，效果如下</p><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">Equal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="C-类模板"><a href="#C-类模板" class="headerlink" title="C++类模板"></a>C++类模板</h2><h3 id="类模板的概念"><a href="#类模板的概念" class="headerlink" title="类模板的概念"></a>类模板的概念</h3><blockquote><p>类模板是用于生成类的模板。在编译阶段，编译器会根据类模板的使用情况创建出仅有部分成员的数据类型和部分成员函数参数类型不同，其他完全相同的若干类。<br>&nbsp;通过类模板，可以尝试写出用于存放不同类型数据的容器。</p></blockquote><h3 id="类模板的使用"><a href="#类模板的使用" class="headerlink" title="类模板的使用"></a>类模板的使用</h3><h4 id="类模板的声明"><a href="#类模板的声明" class="headerlink" title="类模板的声明"></a>类模板的声明</h4><blockquote><p>类模板的声明和函数模板的声明类似，只是类模板的声明中包含了一个模板参数列表，用于指定模板参数<br>类模板的声明如下，其中T代表任意类型，由用户指定</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token keyword">class</span> 类名<span class="token punctuation">&#123;</span>    类成员<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类模板的成员函数定义如下，一般类模板也应该写在头文件中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span>返回类型 类名<span class="token operator">&lt;</span>T<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    函数体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><ol><li><p>编写通用数组类，创建<code>MyArray.h</code>头文件，添加如下代码：</p><pre class="line-numbers language-h" data-language="h"><code class="language-h">#pragma once#ifndef _MYARRAY_H#define _MYARRAY_Htemplate &lt;typename T&gt;class MyArray&#123;private:T data[20];int len;public:MyArray();T indexof(int index);void addValue(T value);&#125;;template &lt;typename T&gt;MyArray&lt;T&gt;::MyArray() : len(0)&#123;&#125;template &lt;typename T&gt;T MyArray&lt;T&gt;::indexof(int index)&#123;return data[index];&#125;template &lt;typename T&gt;void MyArray&lt;T&gt;::addValue(T value)&#123;data[len] &#x3D; value;len++;&#125;#endif &#x2F;&#x2F; !_MYARRAY_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试整形数组，创建<code>main.cpp</code>源文件，添加如下代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyArray.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       MyArray<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译并运行程序，输出结果如下：</p><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">0123456789<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试浮点型数组，修改<code>main.cpp</code>源文件，代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyArray.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       MyArray<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> arr<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">addValue</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">.112f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">indexof</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译并运行程序，输出结果如下：</p><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">0.1121.1122.1123.1124.1125.1126.1127.1128.1129.112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="类模板的特化和偏特化"><a href="#类模板的特化和偏特化" class="headerlink" title="类模板的特化和偏特化"></a>类模板的特化和偏特化</h3><h4 id="类模板的特化"><a href="#类模板的特化" class="headerlink" title="类模板的特化"></a>类模板的特化</h4><blockquote><p>类模板的特化是指在实例化类模板时，对特定类型的泛型进行特殊处理，即用户指定特定类型的类模板时，通过特化过类模板生成的类可能于其他的类由完全不同的结构。</p></blockquote><p>&nbsp;特化类模板需要对整个类模板进行声明定义：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">></span><span class="token keyword">class</span> 类名<span class="token operator">&lt;</span>指定类型<span class="token punctuation">,</span> 指定类型<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token punctuation">&#123;</span>    类成员<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><ol><li>修改<code>MyArray.h</code>头文件，添加如下代码：<pre class="line-numbers language-h" data-language="h"><code class="language-h">template &lt;&gt;class MyArray&lt;double&gt;&#123;public:MyArray();&#125;;MyArray&lt;double&gt;::MyArray()&#123;cout &lt;&lt; &quot;MyArray&lt;double&gt;::MyArray()&quot; &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>修改<code>main.cpp</code>源文件，添加如下代码：<br>其中的<code>main函数</code>内容如下<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">MyArray<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> arr<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>编译并运行程序，输出结果如下：<pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">MyArray&lt;double&gt;::MyArray()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="类模板的偏特化"><a href="#类模板的偏特化" class="headerlink" title="类模板的偏特化"></a>类模板的偏特化</h4><blockquote><p>偏特化与特化相似，但是偏特化只对类模板的部分参数进行特化，而不是对整个类模板进行特化。<br>&nbsp;偏特化模板是需要对整个类模板进行声明定义：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> 不需要特化的泛型<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token keyword">class</span> 类名<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> 不需要特化的泛型<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span><span class="token punctuation">&#123;</span>    类成员<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><ol><li><p>新增文件<code>pair.h</code>，内容如下：</p><pre class="line-numbers language-h" data-language="h"><code class="language-h">#pragma once#ifndef _PAIR_H#define _PAIR_H#include &lt;iostream&gt;using namespace std;template&lt;typename T1, typename T2&gt;class Pair&#123;private:T1 first;T2 second;public:Pair();&#125;;template &lt;typename T1, typename T2&gt;Pair&lt;T1, T2&gt;::Pair()&#123;cout &lt;&lt; &quot;Pair&lt;T1, T2&gt;::Pair()&quot; &lt;&lt; endl;&#125;template &lt;typename T2&gt;class Pair&lt;char, T2&gt;&#123;public:Pair();&#125;;template &lt;typename T2&gt;Pair&lt;char, T2&gt;::Pair()&#123;cout &lt;&lt; &quot;Pair&lt;char, T2&gt;::Pair()&quot; &lt;&lt; endl;&#125;#endif &#x2F;&#x2F; !_PAIR_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>main.cpp</code>文件内容如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"pair.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       Pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> p1<span class="token punctuation">;</span>    Pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> p2<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译并运行程序，输出结果如下：</p><pre class="line-numbers language-terminal" data-language="terminal"><code class="language-terminal">Pair&lt;char, T2&gt;::Pair()Pair&lt;T1, T2&gt;::Pair()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://gcore.jsdelivr.net/gh/chauity/xximgxx/mindmap/C++%E6%A8%A1%E6%9D%BF.html&quot;&gt;本篇文章脑图地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;C-模板编程&quot;&gt;&lt;a href=&quot;#C-模</summary>
      
    
    
    
    <category term="C/C++系列" scheme="https://262617.xyz/categories/C-C-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="C/C++系列" scheme="https://262617.xyz/tags/C-C-%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>使用VSCODE远程服务器</title>
    <link href="https://262617.xyz/20240118/shi-yong-vscode-yuan-cheng-fu-wu-qi/"/>
    <id>https://262617.xyz/20240118/shi-yong-vscode-yuan-cheng-fu-wu-qi/</id>
    <published>2024-01-18T06:18:15.000Z</published>
    <updated>2024-01-18T07:00:23.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用VSCODE远程CENTOS7服务器"><a href="#使用VSCODE远程CENTOS7服务器" class="headerlink" title="使用VSCODE远程CENTOS7服务器"></a>使用VSCODE远程CENTOS7服务器</h1><h2 id="Liunx安装openssh服务器"><a href="#Liunx安装openssh服务器" class="headerlink" title="Liunx安装openssh服务器"></a>Liunx安装openssh服务器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装openssh-server</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> openssh-server<span class="token comment"># 重启openssh-server</span>systemctl restart sshd <span class="token comment">#restart/start/stop分别是重启/启动/停止</span><span class="token comment"># 设置为开机自启</span>systemctl <span class="token builtin class-name">enable</span> sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Remote-SSH插件"><a href="#安装Remote-SSH插件" class="headerlink" title="安装Remote - SSH插件"></a>安装Remote - SSH插件</h2><p>打开VsCode，在插件商店中搜索并安装Remote - SSH插件</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240118142732.png" alt="20240118142732"></p><h2 id="配置SSH连接"><a href="#配置SSH连接" class="headerlink" title="配置SSH连接"></a>配置SSH连接</h2><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/image.png.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240118142949.png" alt="20240118142949"></p><p>在上图输入如下命令：</p><p>ID地址可以通过<code>ifconfig</code>命令获取</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">ssh root@192.168.1.100 # root是登录用户名，192.168.1.100是服务器IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240118143306.png" alt="20240118143306"></p><p>刷新<code>VSCode</code>,这样左边<code>远程资源管理器</code>就出现了远程服务器的内容了</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240118143753.png" alt="20240118143753"></p><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><h3 id="在Windows系统生成SSH密钥对"><a href="#在Windows系统生成SSH密钥对" class="headerlink" title="在Windows系统生成SSH密钥对"></a>在<code>Windows</code>系统生成<code>SSH</code>密钥对</h3><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240118144202.png" alt="20240118144202"> </p><blockquote><p><code>Windows</code>系统密钥对存储位置一般是<code>C:\Users\你的用户名\.ssh</code>，找到公钥位置,公钥名为<code>id_rsa.pub</code></p></blockquote><h3 id="将公钥内容复制到远程服务器的-ssh-authorized-keys文件中"><a href="#将公钥内容复制到远程服务器的-ssh-authorized-keys文件中" class="headerlink" title="将公钥内容复制到远程服务器的~/.ssh/authorized_keys文件中"></a>将公钥内容复制到远程服务器的<code>~/.ssh/authorized_keys</code>文件中</h3><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh"># 安装lrzsz远程文件服务yum -y install lrzszrz -y #上传你的公钥到远程服务器cat id _rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以直接复制粘贴文件内容</p><h3 id="配置VSCode远程文件位置"><a href="#配置VSCode远程文件位置" class="headerlink" title="配置VSCode远程文件位置"></a>配置<code>VSCode</code>远程文件位置</h3><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240118145151.png" alt="20240118145151"></p><p>增加远程文件配置</p><pre class="line-numbers language-none"><code class="language-none">IdentityFile &quot;C:\Users\zhiQ\.ssh\id_rsa&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240118145224.png" alt="20240118145224"></p><p>这样就实现远程免密登录了</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240118150017.png" alt="20240118150017"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用VSCODE远程CENTOS7服务器&quot;&gt;&lt;a href=&quot;#使用VSCODE远程CENTOS7服务器&quot; class=&quot;headerlink&quot; title=&quot;使用VSCODE远程CENTOS7服务器&quot;&gt;&lt;/a&gt;使用VSCODE远程CENTOS7服务器&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="remote ssh + vscode" scheme="https://262617.xyz/categories/remote-ssh-vscode/"/>
    
    
    <category term="remote ssh + vscode" scheme="https://262617.xyz/tags/remote-ssh-vscode/"/>
    
  </entry>
  
  <entry>
    <title>套接字(Socket)---网络编程</title>
    <link href="https://262617.xyz/20240117/wang-luo-bian-cheng/"/>
    <id>https://262617.xyz/20240117/wang-luo-bian-cheng/</id>
    <published>2024-01-17T02:22:49.872Z</published>
    <updated>2024-01-10T07:22:31.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-套接字网络编程"><a href="#C-套接字网络编程" class="headerlink" title="C++套接字网络编程"></a>C++套接字网络编程</h1><h2 id="OSI、TCP-IP-架构"><a href="#OSI、TCP-IP-架构" class="headerlink" title="OSI、TCP&#x2F;IP 架构"></a>OSI、TCP&#x2F;IP 架构</h2><p>了解计算机网络后(不了解也行)，你应该也必须知道OSI七层网络模型和TCP&#x2F;IP五层模型。在大学时候，老师们都会叫我们背这些东西，苦不堪言。最后也还是会忘掉，我们应该是学会理解它们之间的关系，而不用记住。</p><p>首先粘出图片<br><img src="https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112111602.png" alt="20221112111602"></p><p>这就是他们对应的关系，<code>OSI模型</code>分的太细，不是我们要考虑的东西，只用知道上三层对应 <code>TCP/IP模型</code>的应用层，下两层对应 <code>TCP/IP模型</code>的网络接口层。作为Socket编程，我们处理的就是中间的传输层和网际层的东西。</p><p>需要知道TCP、UDP在同一层（传输层）</p><p>IP在（网际层）</p><h3 id="TCP-Transmission-Control-Protocol-协议"><a href="#TCP-Transmission-Control-Protocol-协议" class="headerlink" title="TCP(Transmission Control Protocol)协议"></a>TCP(Transmission Control Protocol)协议</h3><p>对于初学者就需要知道它是可靠的、面向连接的协议就行了。连接需要三次握手、断开需要四次挥手。</p><p>建立连接 &#x3D;&gt; 三次握手：</p><p>三次握手就好比，</p><p>面试官邀请你去面试的场景：</p><p>第一次：（面试官）：您好，您的简历挺不错，明天来面试吗？</p><p>第二次：（你）：好的，明天我有时间，明天能来。</p><p>第三次：（面试官）：那好你就明天来面试吧。</p><p>这是三次握手的图解：</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112113033.png" alt="20221112113033"></p><p>如上图，TCP是双向连接的分为客户端和服务器。就像我们平时使用 <code>Chrome浏览器</code>，它就是一个客户端，服务器是各个网站自己家的，我们就不知道了。</p><p>第一次:客户端发送SYN报文，请求同步，并发送序列号Seq为 X。</p><pre><code>SYN是单词`synchronize`的简写，意为 同步 。就是请求同步的意思。Seq就是一个序列号。也是单词简写`sequence`。</code></pre><p>第二次：服务器收到客户端的SYN报文后，确认要同步。就向客户端发送SYN报文，这个报文和客户端发来的一样，顺带一个ACK报文，ACK报文号是客户端发来的Seq序列号+1，同时附带自己的Seq序列号。</p><pre><code>ACK是单词`acknowledge`的缩写，意为 确认 。即收到同步请求，确认同步。</code></pre><p>第三次：客户端再次发送ACK确认报文，报文号是服务端第二次握手发来的Seq序列号+1，并发送序列号。</p><pre><code>每次都要发送序列号，就是确保连接是正确的，因此TCP是面向连接的，可靠的协议。问：那为什么不四次握手建立连接呢？答：其实也可以四次握手建立连接，只是会浪费带宽。而三次握手是必要的。</code></pre><p>断开连接 &#x3D;&gt; 四次挥手：</p><p>四次挥手就好比，</p><p>你拒绝去面试的场景：</p><p>第一次：（你）：您好，我明天有约了，就不能来面试了。</p><p>第二次：（面试官）：好的，这边收到您不来面试了？</p><p>第三次：（面试官）：您这边明天确定不来了吗？</p><p>第四次：（你）：是的，我不来了。</p><p>emmm~~  现实中面试官肯定不会第三次，还问你是不是不去。但这是计算机断开连接需要的处理。</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112112859.png" alt="20221112112859"></p><p>四次挥手：如上图所示</p><p>第一次：客户端要求断开本次连接。向服务器发送 FIN 报文，并携带序列号Seq。</p><p>第二次：服务器确认断开连接，发送 ACK 报文，序列号是第一次挥手时序列号+1。</p><p>第三次：服务器向客户端发送断开 FIN 报文，并携带序列号。</p><p>第四次：客户端确认断开连接，发送 ACK 报文，序列号是第三次挥手时序列号+1。</p><pre><code>就是一来一回的发送报文，以确定真的要断开连接。</code></pre><h3 id="UDP-User-Datagram-Protocol-协议"><a href="#UDP-User-Datagram-Protocol-协议" class="headerlink" title="UDP(User Datagram Protocol) 协议"></a>UDP(User Datagram Protocol) 协议</h3><p>UDP就不像TCP那样要确认后在发包，它是只管发包,不管你收没收到。这样做的优点就是传输速度快，无情的发包机器。</p><p>学习UDP要了解其报文构成</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221112142029.png" alt="20221112142029"></p><p>如上图，UDP由首部字段和数据字段组成。</p><p>首部字段分为<code>源端口号</code>、<code>目的端口号</code>、<code>长度</code>以及<code>校验码</code>都是2个字节（16比特）。</p><p><code>源端口号</code>和<code>目的端口号</code>很好理解就是发送方和接收方的端口号。</p><p><code>长度</code>就是UDP数据报的长度。</p><p>校验和的作用是检验发送是否出错，出错就丢弃。</p><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>所谓IP就是一段数字，大家肯定都知道。比如<a href="http://www.baidu.com,这是百度的网址,也可以叫做url(统一资源定位符),你叫它域名也是一样的.dns(domain/">www.baidu.com,这是百度的网址，也可以叫做URL（统一资源定位符），你叫它域名也是一样的。DNS（Domain</a> Name System），即是域名系统。在网上搜索<code>域名解析查询</code>。输入百度网站的域名，就能解析出一个形如<code>14.215.177.38</code>的数字。这就是IP。</p><p>其中的每一个数字实际上是一个8个的二进制组成的数字，计算机用1比特来存其中的一个数字，总共需要32比特，也就是4个字节数。这也是ip的大小。</p><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><h3 id="socket编程的概念"><a href="#socket编程的概念" class="headerlink" title="socket编程的概念"></a>socket编程的概念</h3><p><code>socket</code>就是插座(中文翻译套接字)，运行在计算机中的两个程序通过 <code>socket</code><br>建立一个通道，数据在通道中运输。</p><p><code>socket</code>把复杂的TCP&#x2F;IP协议族隐藏了起来，对程序员来说，只要用好 socket相关的函数，就可以完成网络通信。</p><h3 id="socket的分类"><a href="#socket的分类" class="headerlink" title="socket的分类"></a>socket的分类</h3><p><code>socket</code>提供了流（stream）和数据报（datagram）两种通信机制，即 <code>流socket</code>和 <code>数据报socket</code>。</p><p><code>流socket</code>基于 <code>TCP协议</code>，是一个有序、可靠、双向字节流的通道，传输数据数据不会丢失、不会重复、顺序也不会错乱。</p><p><code>数据报socket</code>基于UDP协议，不需要建立和维持连接，可能会丢失或错乱。UDP不是一个可靠的协议，对数据的长度有限制，但是它的效率比较高。</p><p>某些应用层协议，处于历史原因，受当时技术和网络条件限制，选择了基于UDP是实现，其选择的理由很可能现在已经不成立了。</p><p>实时的音视频聊天可能采用的是 <code>UDP</code>，这种业务可以接受数据的丢失且不必重传。</p><p>本专题只介绍 <code>流socket</code>,<code>数据包socket</code>的应用场景实在太少，以后可能更少。</p><h3 id="客户端-服务端模式"><a href="#客户端-服务端模式" class="headerlink" title="客户端&#x2F;服务端模式"></a>客户端&#x2F;服务端模式</h3><p>在 <code>TCP/IP</code>网络应用中，两个程序之间通信模式是客户端&#x2F;服务端模式（client&#x2F;server）。</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/20191225154007754.png" alt="img"></p><h3 id="CPP-网络编程的示例代码"><a href="#CPP-网络编程的示例代码" class="headerlink" title="CPP 网络编程的示例代码"></a>CPP 网络编程的示例代码</h3><p>相关函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token comment">//服务端</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 或 <span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 等<span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 或 <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 等<span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//客户端</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 或 <span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 等<span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 或 <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 等<span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>TCP Stream Socket</code> 代码：</p><p>服务器代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;WinSock2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1.初始化套接字库</span>WORD wVersion<span class="token punctuation">;</span>WSADATA wsaData<span class="token punctuation">;</span><span class="token keyword">int</span> err<span class="token punctuation">;</span><span class="token comment">// 设置版本，可以理解为1.1</span>wVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 例：MAKEWORD(a, b) --> b | a &lt;&lt; 8 将a左移8位变成高位与b合并起来</span><span class="token comment">// 启动</span>err <span class="token operator">=</span> <span class="token function">WSAStartup</span><span class="token punctuation">(</span>wVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsaData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 检查：网络低位不等于1 || 网络高位不等于1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LOBYTE</span><span class="token punctuation">(</span>wsaData<span class="token punctuation">.</span>wVersion<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>wsaData<span class="token punctuation">.</span>wVersion<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 清理套接字库</span><span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.创建tcp套接字// AF_INET:ipv4   AF_INET6:ipv6</span>SOCKET sockSrv <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 准备绑定信息</span>SOCKADDR_IN addrSrv<span class="token punctuation">;</span>addrSrv<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置绑定网卡</span>addrSrv<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">// 设置绑定网络模式</span>addrSrv<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置绑定端口</span><span class="token comment">// hton: host to network  x86:小端    网络传输：htons大端</span><span class="token comment">// 3.绑定到本机</span><span class="token keyword">int</span> retVal <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>sockSrv<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addrSrv<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed bind:%d\n"</span><span class="token punctuation">,</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 4.监听，同时能接收10个链接</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">listen</span><span class="token punctuation">(</span>sockSrv<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Listen failed:%d"</span><span class="token punctuation">,</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Server start at port: 6000"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>SOCKADDR_IN addrCli<span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> recvBuf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> sendBuf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 5.接收连接请求，返回针对客户端的套接字</span>SOCKET sockConn <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockSrv<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addrCli<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sockConn <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//printf("Accept failed:%d", WSAGetLastError());</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Accept failed: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">WSAGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//printf("Accept client IP:[%s]\n", inet_ntoa(addrCli.sin_addr));</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Accept client IP: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>addrCli<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// 6.发送数据</span><span class="token function">sprintf_s</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">,</span> <span class="token string">"hello client!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> iSend <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span> sendBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iSend <span class="token operator">==</span> SOCKET_ERROR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"send failed!\n"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 7.接收数据</span><span class="token function">recv</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">,</span> recvBuf<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> recvBuf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// 关闭套接字</span><span class="token function">closesocket</span><span class="token punctuation">(</span>sockConn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 8.关闭套接字</span><span class="token function">closesocket</span><span class="token punctuation">(</span>sockSrv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 9.清理套接字库</span><span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;WinSock2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">"ws2_32.lib"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1.初始化套接字库</span>WORD wVersion<span class="token punctuation">;</span>WSADATA wsaData<span class="token punctuation">;</span><span class="token keyword">int</span> err<span class="token punctuation">;</span><span class="token comment">// 可以理解为1.1</span>wVersion <span class="token operator">=</span> <span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 例：MAKEWORD(a, b) --> b | a &lt;&lt; 8 将a左移8位变成高位与b合并起来</span><span class="token comment">// 启动</span>err <span class="token operator">=</span> <span class="token function">WSAStartup</span><span class="token punctuation">(</span>wVersion<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsaData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> err<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 检查：网络地位不等于1 || 网络高位不等于1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">LOBYTE</span><span class="token punctuation">(</span>wsaData<span class="token punctuation">.</span>wVersion<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>wsaData<span class="token punctuation">.</span>wVersion<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 清理套接字库</span><span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建TCP套接字</span>SOCKET sockCli <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SOCKADDR_IN addrSrv<span class="token punctuation">;</span>addrSrv<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 服务器地址</span>addrSrv<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 端口号</span>addrSrv<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span><span class="token comment">// 地址类型(ipv4)</span><span class="token comment">// 2.连接服务器</span><span class="token keyword">int</span> err_log <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>sockCli<span class="token punctuation">,</span> <span class="token punctuation">(</span>SOCKADDR <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addrSrv<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err_log <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"连接服务器成功！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"连接服务器失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> recvBuf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> sendBuf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"你好，服务器，我是客户端！"</span><span class="token punctuation">;</span><span class="token comment">// 3.发送数据到服务器</span><span class="token function">send</span><span class="token punctuation">(</span>sockCli<span class="token punctuation">,</span> sendBuf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>sendBuf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4.接收服务器的数据</span><span class="token function">recv</span><span class="token punctuation">(</span>sockCli<span class="token punctuation">,</span> recvBuf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>recvBuf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> recvBuf <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token comment">// 5.关闭套接字并清除套接字库</span><span class="token function">closesocket</span><span class="token punctuation">(</span>sockCli<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-套接字网络编程&quot;&gt;&lt;a href=&quot;#C-套接字网络编程&quot; class=&quot;headerlink&quot; title=&quot;C++套接字网络编程&quot;&gt;&lt;/a&gt;C++套接字网络编程&lt;/h1&gt;&lt;h2 id=&quot;OSI、TCP-IP-架构&quot;&gt;&lt;a href=&quot;#OSI、TCP-IP</summary>
      
    
    
    
    
    <category term="socket, c++" scheme="https://262617.xyz/tags/socket-c/"/>
    
  </entry>
  
  <entry>
    <title>免费图床CDN加速</title>
    <link href="https://262617.xyz/20240105/cdn-tu-chuang/"/>
    <id>https://262617.xyz/20240105/cdn-tu-chuang/</id>
    <published>2024-01-05T06:17:59.000Z</published>
    <updated>2024-01-08T02:12:17.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><code>VSCode PicGo</code> </li><li><code>GitHub</code> </li><li><code>jsDelivr</code></li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h2><ul><li><code>VSCode</code>安装<code>PicGo插件</code></li></ul><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105142927.png" alt="pic1"></p><ul><li>新建<code>GitHub</code>仓库，获取相关<code>PicGo</code>配置参数</li></ul><pre class="line-numbers language-code" data-language="code"><code class="language-code">&#123;  &quot;repo&quot;: &quot;&quot;, &#x2F;&#x2F; 仓库名，格式是username&#x2F;reponame  &quot;token&quot;: &quot;&quot;, &#x2F;&#x2F; github token  &quot;path&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义存储路径，比如img&#x2F;  &quot;customUrl&quot;: &quot;&quot;, &#x2F;&#x2F; 自定义域名，注意要加http:&#x2F;&#x2F;或者https:&#x2F;&#x2F;  &quot;branch&quot;: &quot;&quot; &#x2F;&#x2F; 分支名，默认是main&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>访问 <code>https://github.com/settings/tokens</code>，点击 <code>Generate new token</code><br> <img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105152138.png"></p></li><li><p>新增<code>token</code><br> <img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153031.png"></p></li><li><p>之后拉到最底点击绿色按钮<code>Generate token</code>,记住这个<code>token</code><br><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105153643.png"></p></li></ul><h2 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h2><ul><li>打开<code>VSCode</code>设置,搜索<code>picgo</code><br><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105154256.png"></li></ul><h2 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h2><ul><li><code>Win系统</code>上传剪切板截图快捷键是<code>ctrl + alt + u</code><br><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105155319.png" alt="20240105155319"></li></ul><h2 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h2><ul><li><code>VSCode</code>设置中配置<code>customUrl</code>(自定义域名)</li></ul><p><code>https://gcore.jsdelivr.net/gh/你的用户名/你的仓库名/</code></p><p><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240105160612.png" alt="20240105160612"></p><ul><li>这里面的用到的是<code>jsdelivr</code>，有时候可能会访问不到，一共有三个IP可以作为<code>CDN</code>地址加速,分别是</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//cdn.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//fastly.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//gcore.jsdelivr.net/gh/你的用户名/你的仓库名/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用<code>https://tcping8.com/ping/</code>可以查看多地的cdn加速情况<br><img src="https://gcore.jsdelivr.net/gh/chauity/xximgxx/24-imgs/20240108101021.png" alt="20240108101021"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VSCode PicGo&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;GitHub&lt;/code&gt; &lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="jsDilivr, pic" scheme="https://262617.xyz/categories/jsDilivr-pic/"/>
    
    
    <category term="图床 + cdn + picgo" scheme="https://262617.xyz/tags/%E5%9B%BE%E5%BA%8A-cdn-picgo/"/>
    
  </entry>
  
  <entry>
    <title>解决Hexo部署GitHub域名解析文件丢失的问题</title>
    <link href="https://262617.xyz/20231229/bu-shu-yu-ming-diu-shi/"/>
    <id>https://262617.xyz/20231229/bu-shu-yu-ming-diu-shi/</id>
    <published>2023-12-29T02:37:20.000Z</published>
    <updated>2024-01-10T07:22:31.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用Hexo部署GitHub，会删除之前的所有文件，再重写写入你的博客网站内容。每次部署都会导致<code>CNAME</code>文件丢失，从而无法解析你的自定义域名。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li><p>在你的博客目录的source目录下,新建一个文件，名为<code>CNAME</code>，内容是你的域名地址，例如<code>13524.cn</code>,不含<code>www http</code><br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/2.jpg" alt="image-20231229104202709"><br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/1.jpg" alt="image-20231229104319066"></p></li><li><p>直接使用<code>hexo d</code>,部署就可以看到GitHub仓库已经有了CNAME文件了<br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231229/3.jpg" alt="image-20231229104508940"></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;使用Hexo部署GitHub，会删除之前的所有文件，再重写写入你的博客网站内容。每次部署都会导致&lt;code&gt;CNAME&lt;/code&gt;文件丢失</summary>
      
    
    
    
    
    <category term="DNS, LOSS" scheme="https://262617.xyz/tags/DNS-LOSS/"/>
    
  </entry>
  
  <entry>
    <title>构建本站</title>
    <link href="https://262617.xyz/20231228/jian-zhan/"/>
    <id>https://262617.xyz/20231228/jian-zhan/</id>
    <published>2023-12-28T06:42:29.000Z</published>
    <updated>2024-01-17T02:51:32.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HEXO部署本站"><a href="#HEXO部署本站" class="headerlink" title="HEXO部署本站"></a>HEXO部署本站</h1><h2 id="部署到本地"><a href="#部署到本地" class="headerlink" title="部署到本地"></a>部署到本地</h2><ol><li><p>安装<a href="https://nodejs.org/en">node.js</a></p></li><li><p>安装hexo插件 + 创建博客</p><pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">npm install hexo-cli -ghexo init &lt;folder&gt;cd &lt;folder&gt;npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主题下载</p><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git .&#x2F;themes&#x2F;matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改主题<br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/1.jpg" alt="image-20231228113434249"><br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/2.jpg" alt="image-20231228113556831"></p></li><li><p>本地部署</p><pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">hexo c &amp;&amp; hexo g &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>访问网页 <code>http://localhost:4000</code></p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/10.jpg" alt="image-20231228113914368"></p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><ol><li><p>GitHub创建仓库，名字为xxx.github.io (xxx是你的GitHub用户名)<br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/3.jpg" alt="image-20231228114015376"></p></li><li><p>配置GitHub邮箱和名字</p></li></ol><pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">git config --global user.name &quot;xxx&quot;#提交GitHub的用户名 git config –-global user.email &#96;xxx@xx.xxx&#96;   #你的邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>本地生成密钥对</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将密钥对的公钥内容拷贝到GitHub上，一般存放在<strong>C:\Users\xxx.ssh （xxx是你的电脑用户名）</strong>中<br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/4.jpg" alt="image-20231228115654705"></p></li></ol><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/5.jpg" alt="image-20231228134437625"></p><ol start="5"><li>部署</li></ol><p>配置_config.yml</p><pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">deploy:  type: git  repository: git@github.com:xxx&#x2F;xxx.github.io.git # xxx是你的用户名  branch: master # 可能是main，看你的主干分支命名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">npm install hexo-deployer-git --savehexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>加速<br> 正常访问GitHub网站，可能不能访问，这时候可以使用<a href="https://vercel.com/">vercel</a>来托管仓库，加速访问<br> <img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/6.jpg" alt="image-20231228135603380"></li></ol><p>外网访问<br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/11.jpg" alt="image-20231228141448622"></p><h2 id="设置域名"><a href="#设置域名" class="headerlink" title="设置域名"></a>设置域名</h2><ol><li><p>域名购买，阿里云的6位数字xyz的域名，例如<code>351627.xyz</code>，非常便宜，我买了5年，只花了34。</p></li><li><p>获得你的GitHub的IP地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> xxx.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/8.jpg" alt="image-20231228142658113"></p></li><li><p>域名解析你获取的IP，域名解析控制台记录值填你获取到的IP，解析需要等待10分钟左右，才能解析到你的IP地址，耐心等待<br><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/9.jpg" alt="image-20231228142222926"></p></li><li><p>GitHub配置你的域名，Custom domain填写你的域名</p></li></ol><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/12.jpg" alt="image-20231228143234127"></p><ol start="5"><li><p><strong>仓库目录创建一个名为CNAME的文件，文件内容是你的域名，</strong>例如<code>351627.xyz</code>,等几分钟就完成网站了，你可以直接ping你的域名，发现和你的GitHub的IP一样的</p></li><li><p>后续发现使用<code>hexo d</code>重新部署会顶掉之前的域名绑定，访问出现404，请看<a href="/20231229/bu-shu-yu-ming-diu-shi/">此文</a>解决</p></li><li><p>如果需要网站加速，请看<a href="/20221103/wang-zhan-jia-su/">此文</a>解决</p></li></ol><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/231228/13.jpg" alt="image-20231228143326753"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HEXO部署本站&quot;&gt;&lt;a href=&quot;#HEXO部署本站&quot; class=&quot;headerlink&quot; title=&quot;HEXO部署本站&quot;&gt;&lt;/a&gt;HEXO部署本站&lt;/h1&gt;&lt;h2 id=&quot;部署到本地&quot;&gt;&lt;a href=&quot;#部署到本地&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="build the net" scheme="https://262617.xyz/tags/build-the-net/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之单链表</title>
    <link href="https://262617.xyz/20221226/dan-lian-biao/"/>
    <id>https://262617.xyz/20221226/dan-lian-biao/</id>
    <published>2022-12-26T06:42:20.000Z</published>
    <updated>2024-01-17T02:39:45.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构之单链表"><a href="#数据结构之单链表" class="headerlink" title="数据结构之单链表"></a>数据结构之单链表</h1><h2 id="引入单链表"><a href="#引入单链表" class="headerlink" title="引入单链表"></a>引入单链表</h2><p>节点与节点之间的物理地址不一定不连续，逻辑地址必定是连续的，这种就是链式结构。所谓的单链表就是链式结构的线性表，需要使用一个数据域来存放数据，一个指针域来存放下一个节点的所在地址，这样形成的这种线性结构。一般说的链表就是单链表，下文也将其称为链表，本文介绍的是最简单的整形链表。</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/image-20230103163115246.png" alt="image-20230103163115246"></p><p>链表的节点结构体：</p><pre class="line-numbers language-none"><code class="language-none">typedef int DataType;&#x2F;&#x2F;DataType 是 int 的别名typedef struct node&#123;    DataType data;&#x2F;&#x2F;数据域，用于存放本节点的数据    struct node* next;&#x2F;&#x2F;指针域，用于存放下一节点的地址&#125;Node, *Link;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的结构体中，Node是struct node的别名，Link是struct node*的别名。即 </p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 等价Node st;struct node st;Link p;struct node* p;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>链表中，为了方便空链表和非空链表的统一处理，我们引入了头节点，这个头节点，与其他的节点相同，没有数据域，只有指针域，且其指针指向第一个元素，若是空链表则指针域的指向为空。</p><h2 id="遍历单链表"><a href="#遍历单链表" class="headerlink" title="遍历单链表"></a>遍历单链表</h2><ol><li>定义Link类型节点指针p，并为其申请空间</li><li>指向第一个节点（头节点的下一个节点）</li><li>只要p不为空，则打印p的数据域，且p指向p的下一个节点</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;***   （1）单链表的遍历操作*   操作接口： void displayNode(Link head);*&#x2F;void displayNode(Link head)&#123;    Link p &#x3D; NULL;    p &#x3D; (Link)malloc(sizeof(Node));    p &#x3D; head-&gt;next;    while (p !&#x3D; NULL)    &#123;        printf(&quot;%d &quot;, p-&gt;data);        p &#x3D; p-&gt;next;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="求单链表长度"><a href="#求单链表长度" class="headerlink" title="求单链表长度"></a>求单链表长度</h2><ol><li>定义Link类型节点指针p，并为其申请空间</li><li>指向第一个节点（头节点的下一个节点），定义一个变量count统计长度的值</li><li>只要p不为空，则p指向p的下一个节点，count自增1</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;***   （2）求单链表元素个数*   操作接口：int lengthofNode(Link head);*&#x2F;int lengthofNode(Link head)&#123;    Link p &#x3D; NULL;    p &#x3D; (Link)malloc(sizeof(Node));    p &#x3D; head-&gt;next;    int count &#x3D; 0;    while (p !&#x3D; NULL)    &#123;        p &#x3D; p-&gt;next;        count++;    &#125;    return count;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表查找操作"><a href="#单链表查找操作" class="headerlink" title="单链表查找操作"></a>单链表查找操作</h2><ol><li>定义节点p，用来循环遍历链表</li><li>定义count，用来记载当前所在的下标</li><li>循环，当x与链表当前节点的数据与相等时，则找到了，返回true</li><li>当循环完了，且未找到与x相等的值，则返回false</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/***   （3）单链表查找操作*   操作接口：int queryNode(Link head, DataType x);*/</span><span class="token keyword">bool</span> <span class="token function">queryNode</span><span class="token punctuation">(</span>Link head<span class="token punctuation">,</span> DataType x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Link p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>Link<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>data <span class="token operator">==</span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d第一次出现在第%d个元素上"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">,</span> count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h2><ol><li>三个参数，第一个是头节点，第二个是插入的位置（不是下标，是下标+1），第三个是要插入的元素</li><li>定义节点p用来循环链表，变量count用来记录当前节点下标位置</li><li>当p不为空且count的值小于i-1，则循环遍历且count自增1</li><li>若链表节点已经为空了，count还是小于i，则直接返回false</li><li>否则就断链添加节点</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;***   （4）单链表插入操作*   操作接口：bool insertNode(Link head, int i, DataType x);*&#x2F;bool insertNode(Link head, int i, DataType x)&#123;    Link p &#x3D; NULL;    p &#x3D; (Link)malloc(sizeof(Node));    p &#x3D; head-&gt;next;    int count &#x3D; 0;    while (p !&#x3D; NULL &amp;&amp; count &lt; i-1)    &#123;        p &#x3D; p-&gt;next;        count++;    &#125;    if (p &#x3D;&#x3D; NULL)        return false;    else     &#123;        Link q &#x3D; NULL;        q &#x3D; (Link)malloc(sizeof(Node));        q-&gt;next &#x3D; p-&gt;next;        q-&gt;data &#x3D; x;        p-&gt;next &#x3D; q;        return true;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h2><p>头插法是建立链表的一种方法，也是必须掌握的方法。即每次插入的新节点都是head的next域，最后第一个插入的节点就成了最后一个节点。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;***   （5）创建一个单链表 -- 头插法*   操作接口：Link headnewList(DataType a[], int n);*   头插法：将待插入的节点插在头节点的后面*   结果：插入到链表顺序和数组顺序相反*&#x2F;Link headNewList(DataType a[], int n)&#123;    Link head &#x3D; NULL;    head &#x3D; (Link)malloc(sizeof(Node));    head-&gt;next &#x3D; NULL;    int i &#x3D; 0;    for (i; i &lt; n; i++)    &#123;        Link q &#x3D; NULL;        q &#x3D; (Link)malloc(sizeof(Node));        q-&gt;data &#x3D; a[i];        q-&gt;next &#x3D; head-&gt;next;        head-&gt;next &#x3D; q;    &#125;    return head;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h2><p>尾插法建立链表是需要两个节点，一个rear（尾）指针和一个head（头）指针，head指针指向第一个节点，rear指针指向最新插入的节点，每次新建节点都操作尾指针，最后返回头指针。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;***   （6）创建一个单链表 -- 尾插法*   操作接口：Link rearNewList(DataType a[], int n);*   头插法：将待插入的节点插在终端节点的后面*   结果：插入到链表顺序和数组顺序相同*&#x2F;Link rearNewList(DataType a[], int n)&#123;    Link head &#x3D; NULL, rear &#x3D; NULL;    head &#x3D; (Link)malloc(sizeof(Node));    rear &#x3D; (Link)malloc(sizeof(Node));    head-&gt;next &#x3D; NULL;    rear &#x3D; head;    for (int i &#x3D; 0; i &lt; n; i++)    &#123;        Link q &#x3D; NULL;        q &#x3D; (Link)malloc(sizeof(Node));        q-&gt;data &#x3D; a[i];        q-&gt;next &#x3D; NULL; &#x2F;&#x2F;防止指针瞎指        rear-&gt;next &#x3D; q;        rear &#x3D; q;    &#125;    rear-&gt;next &#x3D; NULL;  &#x2F;&#x2F;最后让尾节点的next置空    return head;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除单链表节点"><a href="#删除单链表节点" class="headerlink" title="删除单链表节点"></a>删除单链表节点</h2><p>删除值为x的节点，思想还是查找的思想，找到了就让指针指向该节点的后继节点，最后断链，没找到就返回false。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;***   （7）单链表节点的删除*   操作接口：bool deleteNode(Link head, DataType x);*&#x2F;bool deleteNode(Link head, DataType x)&#123;    &#x2F;&#x2F; 判空    if (head &#x3D;&#x3D; NULL || head-&gt;next &#x3D;&#x3D; NULL)        return false;    Link p &#x3D; NULL, q &#x3D; NULL;    p &#x3D; (Link)malloc(sizeof(Node));    q &#x3D; (Link)malloc(sizeof(Node));    p &#x3D; head;    q &#x3D; head-&gt;next;    while (q !&#x3D; NULL)    &#123;        if (q-&gt;data &#x3D;&#x3D; x)        &#123;            p-&gt;next &#x3D; q-&gt;next;            free(q);            return true;        &#125;        else        &#123;               p &#x3D; q;            q &#x3D; q-&gt;next;        &#125;    &#125;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单链表置空"><a href="#单链表置空" class="headerlink" title="单链表置空"></a>单链表置空</h2><p>循环遍历每一个节点，一个一个地释放空间，最后释放head指针的空间，这样链表的空间就置空了。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;***   （8）单链表的释放*    操作接口：void clearLink(Link head);*&#x2F;void clearLink(Link head)&#123;    Link p &#x3D; NULL, q &#x3D; NULL;    p &#x3D; (Link)malloc(sizeof(Node));    q &#x3D; (Link)malloc(sizeof(Node));    p &#x3D; head-&gt;next;    q &#x3D; p-&gt;next;    while (p !&#x3D; NULL)    &#123;        free(p);        p &#x3D; q;        q &#x3D; q-&gt;next;    &#125;    free(head);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构之单链表&quot;&gt;&lt;a href=&quot;#数据结构之单链表&quot; class=&quot;headerlink&quot; title=&quot;数据结构之单链表&quot;&gt;&lt;/a&gt;数据结构之单链表&lt;/h1&gt;&lt;h2 id=&quot;引入单链表&quot;&gt;&lt;a href=&quot;#引入单链表&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="list, link, C语言" scheme="https://262617.xyz/tags/list-link-C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>封装的库函数函数</title>
    <link href="https://262617.xyz/20221222/feng-zhuang-han-shu/"/>
    <id>https://262617.xyz/20221222/feng-zhuang-han-shu/</id>
    <published>2022-12-22T11:53:12.000Z</published>
    <updated>2024-01-03T06:47:12.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="封装的一些库函数"><a href="#封装的一些库函数" class="headerlink" title="封装的一些库函数"></a>封装的一些库函数</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>学习了B站大佬的 <code>http://www.freecplus.net/</code> 网站，自己动手封装了一些库函数</p><p>头文件： _pub.h</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token comment">// 求绝对值的函数</span><span class="token keyword">int</span> <span class="token function">ABS</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//int求绝对值</span><span class="token keyword">long</span> <span class="token function">LABS</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//long求绝对值</span><span class="token comment">// char to int</span><span class="token keyword">int</span> <span class="token function">CTOI</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符转化为数字</span><span class="token comment">// pow</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">POW</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//求幂</span><span class="token comment">// nptr to int </span><span class="token keyword">int</span> <span class="token function">ISSPACE</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">ATOI</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把字符串转化为int</span><span class="token keyword">long</span> <span class="token function">ATOL</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把字符串转化为long</span><span class="token keyword">double</span> <span class="token function">ATOD</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串操作一系列函数</span><span class="token keyword">int</span> <span class="token function">ISALPHA</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若ch是字母字符'a-z'或者'A-Z' 返回非0值，否则返回0</span><span class="token keyword">int</span> <span class="token function">ISALNUM</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若ch是字母字符'a-z', 'A-Z' 或者数字字符'0-9' 返回非0值，否则返回0</span><span class="token keyword">int</span> <span class="token function">ISDIGIT</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若ch是数字'0-9' 返回非0值，否则返回0</span><span class="token keyword">int</span> <span class="token function">ISLOWER</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若ch是小写字母'a-z' 返回非0值，否则返回0</span><span class="token keyword">int</span> <span class="token function">ISUPPER</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若ch是大写字母'A-Z' 返回非0值  否则返回0</span><span class="token keyword">int</span> <span class="token function">TOLOWER</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若ch是大写字母'A-Z' 转化为对应小写字母 返回其ASCALL码</span><span class="token keyword">int</span> <span class="token function">TOUPPER</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若ch是小写字母'a-z' 转化为对应大写字母 返回其ASCALL码</span><span class="token comment">//浮点数的一系列函数</span><span class="token keyword">double</span> <span class="token function">FABS</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 求双精度实数x的绝对值</span><span class="token keyword">double</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// double四舍五入</span><span class="token keyword">double</span> <span class="token function">CEIL</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// double向上取整数</span><span class="token keyword">double</span> <span class="token function">FLOOR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// double向下取整数</span><span class="token comment">//把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分</span><span class="token keyword">double</span> <span class="token function">MODF</span><span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">,</span><span class="token keyword">double</span> <span class="token operator">*</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/***字符串一系列函数***/</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token class-name">size_t</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">MEMSET</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> index<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串置位函数</span><span class="token class-name">size_t</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>  str<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 实现strlen函数的功能</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRCPY</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 实现strcpy函数的功能，下同。</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRNCPY</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span><span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRCAT</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRNCAT</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span><span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRCHR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRRCHR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串比较函数</span><span class="token keyword">int</span> <span class="token function">STRCMP</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">STRNCMP</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str2<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断字符串</span><span class="token keyword">void</span> <span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//小写字母转大写 忽略其他字符</span><span class="token keyword">void</span> <span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//大写字母转小写 忽略其他字符</span><span class="token keyword">int</span> <span class="token function">IsDigit</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断内容是否全是数字 1-是 0-不是</span><span class="token keyword">int</span> <span class="token function">IsUpper</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断内容是否全是大写字母 1-是 0-不是</span><span class="token keyword">int</span> <span class="token function">IsLower</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断字符是否全是小写字母 1-是 0-不是</span><span class="token keyword">int</span> <span class="token function">IsASCLL</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断是否全是ASCLL字符 1-是 0-不是</span><span class="token comment">// KMP算法重写快速匹配 -- 暂时实现的是暴力破解BF算法</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">STRSTR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//********************************XML解析**************************************</span><span class="token keyword">int</span> <span class="token function">GetXMLBuffer_Int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_XMLBuffer<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_FieldName<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>out_Value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">GetXMLBuffer_Str</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_XMLBuffer<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_FieldName<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>out_Value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">GetXMLBuffer_Double</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_XMLBuffer<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_FieldName<span class="token punctuation">,</span><span class="token keyword">double</span> <span class="token operator">*</span>out_Value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*********************************时间转换**************************************/</span><span class="token keyword">int</span> <span class="token function">TIMETOSTR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">time_t</span> ti<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>strtime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把整数的时间转换为字符串格式的时间</span><span class="token keyword">int</span> <span class="token function">STRTOTIME</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>strtime<span class="token punctuation">,</span><span class="token class-name">time_t</span> <span class="token operator">*</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把字符串格式的时间转换为整数的时间</span><span class="token keyword">void</span> <span class="token function">LOCALTIME</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>out_stime<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_fmt<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> in_interval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取操作系统的时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件： _pub.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"_pub.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression"><span class="token constant">NULL</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NULL</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">// ABS</span><span class="token keyword">int</span> <span class="token function">ABS</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ret<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">else</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">LABS</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> ret<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">else</span>ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">;</span><span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// char to int</span><span class="token keyword">int</span> <span class="token function">CTOI</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">></span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> c <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// POW</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span>  <span class="token function">POW</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">long</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> base <span class="token operator">=</span> x<span class="token punctuation">,</span> index <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>result <span class="token operator">*=</span> base<span class="token punctuation">;</span>base <span class="token operator">*=</span> base<span class="token punctuation">;</span>index <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//判断是否有空格</span><span class="token keyword">int</span> <span class="token function">ISSPACE</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\t'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\f'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\v'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'\r'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/************* ATOI &amp;&amp; ATOL*************************/</span><span class="token keyword">int</span> <span class="token function">ATOI</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token comment">// string to int</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sign<span class="token punctuation">;</span><span class="token keyword">char</span> sign_1 <span class="token operator">=</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span><span class="token keyword">int</span> nValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ISSPACE</span><span class="token punctuation">(</span><span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">)</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//去空格</span>sign <span class="token operator">=</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ISDIGIT</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ISDIGIT</span><span class="token punctuation">(</span><span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nValue <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> nValue <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>nptr <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sign_1 <span class="token operator">==</span> <span class="token char">'-'</span><span class="token operator">?</span> <span class="token operator">-</span>nValue<span class="token operator">:</span>nValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">ATOL</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token comment">// string to long</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sign<span class="token punctuation">;</span><span class="token keyword">char</span> sign_1 <span class="token operator">=</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span><span class="token keyword">long</span> nValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ISSPACE</span><span class="token punctuation">(</span><span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">)</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//去空格</span>sign <span class="token operator">=</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ISDIGIT</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ISDIGIT</span><span class="token punctuation">(</span><span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nValue <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> nValue <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>nptr <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sign_1 <span class="token operator">==</span> <span class="token char">'-'</span><span class="token operator">?</span> <span class="token operator">-</span>nValue<span class="token operator">:</span>nValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">ATOD</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> nptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> sign<span class="token punctuation">;</span><span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> sign_1 <span class="token operator">=</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span><span class="token keyword">int</span> nValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ISSPACE</span><span class="token punctuation">(</span><span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">)</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//去空格</span>sign <span class="token operator">=</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ISDIGIT</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sign <span class="token operator">!=</span> <span class="token char">'.'</span><span class="token punctuation">)</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">ISDIGIT</span><span class="token punctuation">(</span><span class="token operator">*</span>nptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span>point<span class="token operator">++</span><span class="token punctuation">;</span>nValue <span class="token operator">=</span> <span class="token function">POW</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span>point<span class="token punctuation">)</span> <span class="token operator">*</span> nValue <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>nptr <span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>nValue <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> nValue <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>nptr <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sign_1 <span class="token operator">==</span> <span class="token char">'-'</span><span class="token operator">?</span> <span class="token operator">-</span>nValue<span class="token operator">:</span>nValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/******************字符操作一些列函数****************/</span><span class="token keyword">int</span> <span class="token function">ISALPHA</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ISALNUM</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">47</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ISDIGIT</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">47</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ISLOWER</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">ISUPPER</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">TOLOWER</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">TOUPPER</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/***************** 浮点数一系列函数***************/</span><span class="token keyword">double</span> <span class="token function">FABS</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token comment">//求双精度实数x的绝对值</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> a <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>a <span class="token operator">*=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token comment">//double四舍五入</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> x <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span>a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">CEIL</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token comment">//double向上取整数</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> x<span class="token punctuation">;</span>a <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">FLOOR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token comment">// double向下取整数</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">MODF</span><span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">,</span><span class="token keyword">double</span> <span class="token operator">*</span>ip<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 把双精度val分解成整数部分和小数部分，整数部分存放在ip所指的变量中，返回小数部分</span><span class="token keyword">int</span> a <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> val <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token keyword">double</span> da <span class="token operator">=</span> val <span class="token operator">-</span> d<span class="token punctuation">;</span><span class="token operator">*</span>ip <span class="token operator">=</span> da<span class="token punctuation">;</span><span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/***************字符串一系列函数*********************/</span><span class="token class-name">size_t</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> str1 <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span>str1<span class="token operator">++</span><span class="token punctuation">;</span>len <span class="token operator">=</span> str1 <span class="token operator">-</span> str<span class="token punctuation">;</span><span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//置位函数</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">MEMSET</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> index<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> str <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span>str<span class="token operator">++</span> <span class="token operator">=</span> index<span class="token punctuation">;</span><span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//修改字符串指针指向</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRCPY</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRNCPY</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span><span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 字符串拼接</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRCAT</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> src<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span> str1 <span class="token operator">=</span> dest<span class="token punctuation">;</span><span class="token keyword">long</span> len <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> len_d <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str1<span class="token punctuation">[</span>len_d<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>len_d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRNCAT</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span> str1 <span class="token operator">=</span> dest<span class="token punctuation">;</span><span class="token keyword">long</span> len_d <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>str1<span class="token punctuation">[</span>len_d<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>len_d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRCHR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span> sb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>sb <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>sb<span class="token operator">++</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> len<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">"(null)"</span><span class="token punctuation">;</span><span class="token keyword">return</span> sb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">STRRCHR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span> sb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>sb <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>sb<span class="token operator">--</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> len<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">"(null)"</span><span class="token punctuation">;</span><span class="token keyword">return</span> sb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//====================字符串比较函数=====================</span><span class="token keyword">int</span> <span class="token function">STRCMP</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">></span><span class="token function">STRLEN</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">STRLEN</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">STRLEN</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">!=</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>str1<span class="token operator">++</span><span class="token punctuation">;</span>str2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">STRNCMP</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str1 <span class="token operator">!=</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>str1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>str1<span class="token operator">++</span><span class="token punctuation">;</span>str2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断字符串</span><span class="token keyword">void</span> <span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token comment">//小写字母转大写 忽略其他字符</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token operator">*</span>str <span class="token operator">-=</span> <span class="token number">32</span><span class="token punctuation">;</span>str<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token comment">//大写字母转小写 忽略其他字符</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>str<span class="token punctuation">;</span> <span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> str<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token operator">*</span>str <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">IsDigit</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token comment">//判断内容是否全是数字 1-是 0-不是</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>str<span class="token punctuation">;</span> <span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> str<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">IsUpper</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token comment">//判断内容是否全是大写字母 1-是 0-不是</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>str<span class="token punctuation">;</span> <span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> str<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">IsLower</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token comment">//判断字符是否全是小写字母 1-是 0-不是</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>str<span class="token punctuation">;</span> <span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> str<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">IsASCLL</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token comment">//判断是否全是ASCLL字符 1-是 0-不是</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>str<span class="token punctuation">;</span> <span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> str<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>str <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 暴力算法 -- BF</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">STRSTR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> str1<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> str2<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> current <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> str1<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>current<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s1 <span class="token operator">=</span> current<span class="token punctuation">;</span>s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>str2<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>s2 <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">==</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s1<span class="token operator">++</span><span class="token punctuation">;</span>s2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>s2 <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token keyword">return</span> current<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>s1 <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>current<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*****************XML  解析*************************/</span><span class="token keyword">int</span> <span class="token function">GetXMLBuffer_Str</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> in_XMLBuffer<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> in_FieldName<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> out_Value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>out_Value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 要存的地址不存在，即out_Value指针是空指针</span><span class="token keyword">char</span><span class="token operator">*</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> startStr<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> endStr<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len_Field <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>in_FieldName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>startStr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>startStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>endStr <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>endStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCPY</span><span class="token punctuation">(</span>startStr<span class="token punctuation">,</span> <span class="token string">"&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCAT</span><span class="token punctuation">(</span>startStr<span class="token punctuation">,</span> in_FieldName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCAT</span><span class="token punctuation">(</span>startStr<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCPY</span><span class="token punctuation">(</span>endStr<span class="token punctuation">,</span> <span class="token string">"&lt;/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCAT</span><span class="token punctuation">(</span>endStr<span class="token punctuation">,</span> in_FieldName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCAT</span><span class="token punctuation">(</span>endStr<span class="token punctuation">,</span> <span class="token string">">"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">STRSTR</span><span class="token punctuation">(</span>in_XMLBuffer<span class="token punctuation">,</span> startStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>end<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">STRSTR</span><span class="token punctuation">(</span>in_XMLBuffer<span class="token punctuation">,</span> endStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//未找到匹配字符串</span><span class="token keyword">int</span> length_Str <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">-</span> len_Field<span class="token punctuation">;</span><span class="token function">STRNCPY</span><span class="token punctuation">(</span>out_Value<span class="token punctuation">,</span> start<span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span>len_Field<span class="token punctuation">,</span> length_Str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">GetXMLBuffer_Int</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_XMLBuffer<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_FieldName<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>out_Value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">GetXMLBuffer_Str</span><span class="token punctuation">(</span>in_XMLBuffer<span class="token punctuation">,</span> in_FieldName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> out_Value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>out_Value <span class="token operator">=</span> <span class="token function">ATOI</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>out_Value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">GetXMLBuffer_Double</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_XMLBuffer<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_FieldName<span class="token punctuation">,</span><span class="token keyword">double</span> <span class="token operator">*</span>out_Value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">GetXMLBuffer_Str</span><span class="token punctuation">(</span>in_XMLBuffer<span class="token punctuation">,</span> in_FieldName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> out_Value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>out_Value <span class="token operator">=</span> <span class="token function">ATOD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>out_Value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*********************************时间函数***************************************/</span><span class="token comment">/** * 把整数的时间转换为字符串格式的时间， * 格式如："2019-02-08 12:05:08"， * 如果转换成功函数返回1，失败返回0 * */</span><span class="token keyword">int</span> <span class="token function">TIMETOSTR</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">time_t</span> ti<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>strtime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> ptimer<span class="token punctuation">;</span><span class="token comment">//C内置时间结构体</span>ptimer <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>strtime<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>strtime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>strtime<span class="token punctuation">,</span><span class="token string">"%d-%d-%d %d:%d:%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_year<span class="token operator">+</span><span class="token number">1900</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mon<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mday<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_hour<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_min<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_sec <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 字符串格式的时间转换为整数的时间 * 写的很烂 * */</span><span class="token keyword">int</span> <span class="token function">STRTOTIME</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>strtime<span class="token punctuation">,</span><span class="token class-name">time_t</span> <span class="token operator">*</span>ti<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> strtime<span class="token punctuation">;</span><span class="token keyword">char</span> syear<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> smon<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sday<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shour<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> smin<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ssec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>syear<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>syear<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>smon<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>smon<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>sday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sday<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>shour<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>shour<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>smin<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>smin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>ssec<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ssec<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> len<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>len <span class="token operator">=</span> <span class="token function">STRLEN</span><span class="token punctuation">(</span>strtime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> index<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>syear<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>syear<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> index<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>smon<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>smon<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> index<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sday<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sday<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> index<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>shour<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">':'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>shour<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> index<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>smin<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">':'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>smin<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>  index <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> index<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span>ssec<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> strtime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">tm</span> timer<span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>timer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span>tm_year <span class="token operator">=</span> <span class="token function">ATOI</span><span class="token punctuation">(</span>syear<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1900</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span>tm_mon <span class="token operator">=</span> <span class="token function">ATOI</span><span class="token punctuation">(</span>smon<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span>tm_mday <span class="token operator">=</span> <span class="token function">ATOI</span><span class="token punctuation">(</span>sday<span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span>tm_hour <span class="token operator">=</span> <span class="token function">ATOI</span><span class="token punctuation">(</span>shour<span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span>tm_min <span class="token operator">=</span> <span class="token function">ATOI</span><span class="token punctuation">(</span>smin<span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span>tm_sec <span class="token operator">=</span> <span class="token function">ATOI</span><span class="token punctuation">(</span>ssec<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>ti <span class="token operator">=</span> <span class="token function">mktime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * *  获取操作系统当前的时间 * * */</span><span class="token keyword">void</span> <span class="token function">LOCALTIME</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>out_stime<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>in_fmt<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> in_interval<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">time_t</span> timep<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">tm</span><span class="token operator">*</span> ptimer<span class="token punctuation">;</span><span class="token comment">//C内置时间结构体</span>timep <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timep<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span> <span class="token operator">*</span> in_interval<span class="token punctuation">;</span>ptimer <span class="token operator">=</span> <span class="token function">localtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>timep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"yyyy-mm-dd hh24:mi:ss"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d-%d-%d %d:%d:%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_year<span class="token operator">+</span><span class="token number">1900</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mon<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mday<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_hour<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_min<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_sec <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"yyyymmddhh24miss"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d%d%d%d%d%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_year<span class="token operator">+</span><span class="token number">1900</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mon<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mday<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_hour<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_min<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_sec <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"yyyy-mm-dd"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d-%d-%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_year<span class="token operator">+</span><span class="token number">1900</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mon<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mday <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"yyyymmdd"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_year<span class="token operator">+</span><span class="token number">1900</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mon<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_mday <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"hh24:mi:ss"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d:%d:%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_hour<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_min<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_sec <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"hh24miss"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_hour<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_min<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_sec <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"hh24:mi"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d:%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_hour<span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_min <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"hh24"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d"</span><span class="token punctuation">,</span> \ptimer<span class="token operator">-></span>tm_hour <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>in_fmt<span class="token punctuation">,</span> <span class="token string">"mi"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sprintf</span><span class="token punctuation">(</span>out_stime<span class="token punctuation">,</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ptimer<span class="token operator">-></span>tm_sec <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_pub : 封装的函数</p><pre class="line-numbers language-." data-language="."><code class="language-.">1.ABS, LABS -- 绝对值2.CTOI -- 字符转数字3.POW -- 求幂值4.STRLEN -- 求字符串长度  ××× 已删除合并到85.ATOI, ATOL -- 字符串转数字6.ISALPHA, ISALNUM, ISDIGIT, ISLOWER, ISUPPER, TOLOWER, TOUPPER -- 字符操作的一系列函数7.FABS, ROUND, CEIL, FLOOR, MODF -- 浮点数一系列函数8.STRLEN, STRCPY, STRNCPY, STRCAT, STRNCAT, STRCHR, STRRCHR -- 字符串一系列函数9.  STRCMP, STRNCMP -- 字符串比较函数10. ToUpper, ToLower, IsDigit, IsUpper, IsLower, IsASCLL -- 字符串判断函数11. STRSTR -- BF匹配子字符串12.GetXMLBuffer_Str, GetXMLBuffer_Int, GetXMLBuffer_Double13. 补充了修补了ATOI, ATOL, ATOD(不精确), ISSPACE 等函数14. TIMETOSTR, STRTOTIMR, LOCALTIME -- 时间操作函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：test.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"_pub.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">struct</span> <span class="token class-name">st_girl</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token keyword">char</span> stature<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> facevalue<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">long</span> <span class="token keyword">int</span> in<span class="token punctuation">,</span>out<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要求值的数字\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>out <span class="token operator">=</span> <span class="token function">ABS</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>out <span class="token operator">=</span> <span class="token function">LABS</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"out = %ld\n"</span><span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">char</span> a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入要转化的字符数字\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> bb <span class="token operator">=</span> <span class="token function">CTOI</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"out = %d\n"</span><span class="token punctuation">,</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"5^5 = %lld\n"</span><span class="token punctuation">,</span><span class="token function">POW</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2^33 = %lld\n"</span><span class="token punctuation">,</span><span class="token function">POW</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">char</span> aa<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"len of aa = %d\n"</span><span class="token punctuation">,</span><span class="token function">STRLEN</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//printf("aa = %d\n",ATOI(aa));</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"aa = %ld\n"</span><span class="token punctuation">,</span><span class="token function">ATOL</span><span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">,</span>B <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token char">'5'</span><span class="token punctuation">,</span>e <span class="token operator">=</span> <span class="token char">'6'</span><span class="token punctuation">;</span><span class="token keyword">char</span> d <span class="token operator">=</span> <span class="token char">'\\'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d %c %c\n"</span><span class="token punctuation">,</span><span class="token function">ISALPHA</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ISDIGIT</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ISDIGIT</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ISUPPER</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ISALNUM</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TOLOWER</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">TOUPPER</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">64.54864</span><span class="token punctuation">;</span><span class="token keyword">double</span> j <span class="token operator">=</span> <span class="token function">FABS</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i=%.5lf,j=%.5lf\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> k <span class="token operator">=</span> <span class="token number">6.7</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">3.3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf,%lf\n"</span><span class="token punctuation">,</span><span class="token function">CEIL</span><span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">FLOOR</span><span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> z <span class="token operator">=</span> <span class="token number">1.3</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token operator">*</span>pz <span class="token operator">=</span> <span class="token operator">&amp;</span>z<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span><span class="token function">MODF</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span>pz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>pz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lu\n"</span><span class="token punctuation">,</span><span class="token function">strlen1</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset1</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset1</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy1</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"10000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1=%s=\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy1</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token string">"1008611"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str2=%s=\n"</span><span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy1</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1=%s=\n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1=%s=\n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">char</span> A<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//置空很重要</span><span class="token function">memset1</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset1</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A=%s=,B=%s=\n"</span><span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy1</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy1</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A=%s=,B=%s=\n"</span><span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy1</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token string">"你 好"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy1</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token string">"世 界"</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcat1</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncat1</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A=%s=,B=%s=\n"</span><span class="token punctuation">,</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">char</span> X<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCPY</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token string">"ksdkkbdeefb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">STRCHR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----------------\n%s\n"</span><span class="token punctuation">,</span><span class="token function">STRCHR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n--------------------"</span><span class="token punctuation">,</span> <span class="token function">strrchr</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%s\n"</span><span class="token punctuation">,</span><span class="token function">STRRCHR</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCPY</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"ABCdd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRCPY</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token string">"ABCddee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1?str2=.%d.\n"</span><span class="token punctuation">,</span><span class="token function">strcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1?str2=.%d.\n"</span><span class="token punctuation">,</span><span class="token function">STRCMP</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1?str2=.%d.\n"</span><span class="token punctuation">,</span><span class="token function">STRNCMP</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1?str2=.%d.\n"</span><span class="token punctuation">,</span><span class="token function">STRNCMP</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ToUpper</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=%s=\n"</span><span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d,%d\n"</span><span class="token punctuation">,</span> <span class="token function">IsUpper</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">IsLower</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">IsASCLL</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,\n"</span><span class="token punctuation">,</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"==================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ToLower</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d,%d\n"</span><span class="token punctuation">,</span> <span class="token function">IsUpper</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">IsLower</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">IsASCLL</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">IsDigit</span><span class="token punctuation">(</span><span class="token string">"1123545998877445566332211"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"111222333"</span><span class="token punctuation">,</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">STRSTR</span><span class="token punctuation">(</span><span class="token string">"111222333"</span><span class="token punctuation">,</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"111222333"</span><span class="token punctuation">,</span><span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">STRSTR</span><span class="token punctuation">(</span><span class="token string">"111222333"</span><span class="token punctuation">,</span><span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token string">"11122233e3"</span><span class="token punctuation">,</span><span class="token string">"eeee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span><span class="token function">STRSTR</span><span class="token punctuation">(</span><span class="token string">"11122233e3"</span><span class="token punctuation">,</span><span class="token string">"eeee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token comment">/*测试XML*/</span><span class="token keyword">struct</span> <span class="token class-name">st_girl</span> beautygirl<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">st_girl</span><span class="token operator">*</span>  beauty <span class="token operator">=</span> <span class="token operator">&amp;</span>beautygirl<span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>beauty<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"西施"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beauty<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>beauty<span class="token operator">-></span>height <span class="token operator">=</span> <span class="token number">168</span><span class="token punctuation">;</span>beauty<span class="token operator">-></span>weight <span class="token operator">=</span> <span class="token number">48.5</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>beauty<span class="token operator">-></span>stature<span class="token punctuation">,</span> <span class="token string">"火辣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>beauty<span class="token operator">-></span>facevalue<span class="token punctuation">,</span> <span class="token string">"漂亮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">"&lt;name>%s&lt;/name>"</span>\ <span class="token string">"&lt;age>%d&lt;/age>"</span>\ <span class="token string">"&lt;height>%d&lt;/height>"</span>\<span class="token string">"&lt;weight>%lf&lt;/weight>"</span>\<span class="token string">"&lt;stature>%s&lt;/stature>"</span>\<span class="token string">"&lt;facevalue>%s&lt;/facevalue>"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>beauty<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>beauty<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>beauty<span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>beauty<span class="token punctuation">)</span><span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>beauty<span class="token punctuation">)</span><span class="token punctuation">.</span>stature<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>beauty<span class="token punctuation">)</span><span class="token punctuation">.</span>facevalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetXMLBuffer_Str</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=%s=\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetXMLBuffer_Str</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"stature"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=%s=\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetXMLBuffer_Str</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"facevalue"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=%s=\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>height<span class="token punctuation">;</span><span class="token keyword">double</span> dd<span class="token punctuation">;</span><span class="token function">GetXMLBuffer_Int</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetXMLBuffer_Int</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">GetXMLBuffer_Double</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=age=%d,height=%d=,weight=%lf\n"</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> height<span class="token punctuation">,</span> dd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token class-name">time_t</span> t<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">TIMETOSTR</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"datetime=%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">STRTOTIME</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"t=%ld\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">char</span> out_time<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">MEMSET</span><span class="token punctuation">(</span>out_time<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>out_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LOCALTIME</span><span class="token punctuation">(</span>out_time<span class="token punctuation">,</span> <span class="token string">"yyyy-mm-dd hh24:mi:ss"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"out_time=%s\n"</span><span class="token punctuation">,</span> out_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LOCALTIME</span><span class="token punctuation">(</span>out_time<span class="token punctuation">,</span> <span class="token string">"yyyymmddhh24miss"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"out_time=%s\n"</span><span class="token punctuation">,</span> out_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LOCALTIME</span><span class="token punctuation">(</span>out_time<span class="token punctuation">,</span> <span class="token string">"yyyy-mm-dd"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"out_time=%s\n"</span><span class="token punctuation">,</span> out_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LOCALTIME</span><span class="token punctuation">(</span>out_time<span class="token punctuation">,</span> <span class="token string">"yyyymmdd"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"out_time=%s\n"</span><span class="token punctuation">,</span> out_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LOCALTIME</span><span class="token punctuation">(</span>out_time<span class="token punctuation">,</span> <span class="token string">"hh24:mi:ss"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"out_time=%s\n"</span><span class="token punctuation">,</span> out_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;封装的一些库函数&quot;&gt;&lt;a href=&quot;#封装的一些库函数&quot; class=&quot;headerlink&quot; title=&quot;封装的一些库函数&quot;&gt;&lt;/a&gt;封装的一些库函数&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="C语言, 库函数" scheme="https://262617.xyz/tags/C%E8%AF%AD%E8%A8%80-%E5%BA%93%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="https://262617.xyz/20221109/mou-pao-pai-xu/"/>
    <id>https://262617.xyz/20221109/mou-pao-pai-xu/</id>
    <published>2022-11-09T12:21:09.000Z</published>
    <updated>2024-01-10T07:22:31.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>使用冒泡排序对一个数组进行排序。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>首先看冒泡排序的规则：</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/blog/pictrues/bubbleSort.gif" alt="冒泡排序"></p><p>相邻两个元素之间一一比较，出现有前一个值比后一个值大的情况，就交换两个元素的位置，没执行完一轮就有一个最大值（最小值）冒出来，直到最后顺序排列。</p><p>这个动图看着很直观，但是却不能很形象的解决问题。这个问题的难点在于到底要比较多少次，每次应该需要多少个元素比较。</p><p>下图是我简化了数组个数，画的冒泡排序的图解。</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/blog/pictures/20221110093829.png" alt="20221110093829"></p><p>如上图所示，我们不难得出：</p><ul><li>1.冒泡排序排序前的<code>数组个数</code>与<code>第几轮比较</code>和<code>每轮比较次数</code>之间的关系。即</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">数组个数 = 第几轮比较 + 每轮比较的次数;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>2.每轮比较都会挑选出一个<code>最值</code>，这里升序以最大值为例。选出之后下一轮就不再比较。这就是冒泡排序所谓的冒泡特征，每轮冒出一个<code>最值</code>。</p><ul><li>通过上面第一点，我们不难想出，使用两个<code>for</code>循环嵌套完成冒泡排序，外层循环掌管<code>第几轮比较</code>，内层循环掌管<code>每轮比较的次数</code>。</li><li>通过上面第二点，又可以知道，从低到高两两比较，挑出一个<code>最值</code>，两两之间比较要交换位置时，会用到一个<code>temp</code>中间值存储零时变量。</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码如下：我将在<code>bubbleSort</code> 函数中，使用两个形参，一个是数组指针，另外一个是数组长度。这是用户使用时，需要传递的参数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> parray<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//外层循环：第几轮比较</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//内层循环：每轮怎么比较</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>length<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>parray<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">*</span><span class="token punctuation">(</span>parray<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>parray<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>parray<span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>parray<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>parray<span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> parray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整的示例代码如下：</p><p>其中，我将交换的代码封装成了swap函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"iostream"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cstdlib"</span></span><span class="token comment">//函数原型</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//动态生成一个int类型的数组</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"执行冒泡排序前动态生成的数组是："</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// rand() 生成的随机数一般是几万</span><span class="token comment">// 这里除1000取余+1，生成0-1000的随机数</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"]="</span> <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------------------"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"执行冒泡排序后的数组改变成了："</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array["</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"]="</span> <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//清理数组内存</span><span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>array<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这里排序是升序排序</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>parray<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">// 比较 length-1 轮</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">// 每轮要比较的元素</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>parray<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> parray<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>parray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>parray<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> parray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// -- Swap 交换 A，B</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>A<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token operator">*</span>A<span class="token punctuation">;</span><span class="token operator">*</span>A <span class="token operator">=</span> <span class="token operator">*</span>B<span class="token punctuation">;</span><span class="token operator">*</span>B <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h</summary>
      
    
    
    
    
    <category term="冒泡排序" scheme="https://262617.xyz/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>配置网站加速</title>
    <link href="https://262617.xyz/20221103/wang-zhan-jia-su/"/>
    <id>https://262617.xyz/20221103/wang-zhan-jia-su/</id>
    <published>2022-11-03T08:59:59.000Z</published>
    <updated>2024-01-25T02:41:30.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li>由于<code>Hexo</code>网站是部署在<code>GitHub</code>上，国内访问速度很慢，需要加速访问</li></ul><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><ul><li>使用<code>hexo-offline-popup</code>插件加速</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul><li><code>Hexo</code>根目录安装<code>hexo-offline-popup</code>插件</li></ul><pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">npm i -S hexo-offline-popup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置<code>Hexo</code>根目录的文件<code>_config.yml</code></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">service_worker</span><span class="token punctuation">:</span>  <span class="token key atrule">maximumFileSizeToCacheInBytes</span><span class="token punctuation">:</span> <span class="token number">5242880</span>  <span class="token key atrule">staticFileGlobs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> public/<span class="token important">**/*.</span><span class="token punctuation">&#123;</span>js<span class="token punctuation">,</span>html<span class="token punctuation">,</span>css<span class="token punctuation">,</span>png<span class="token punctuation">,</span>jpg<span class="token punctuation">,</span>gif<span class="token punctuation">,</span>svg<span class="token punctuation">,</span>eot<span class="token punctuation">,</span>ttf<span class="token punctuation">,</span>woff<span class="token punctuation">,</span>woff2<span class="token punctuation">&#125;</span>  <span class="token key atrule">stripPrefix</span><span class="token punctuation">:</span> public  <span class="token key atrule">verbose</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#runtimeCaching: # 有配置cdn资源(如jsdelivr)开启</span>  <span class="token comment">#  - urlPattern: /npm/*</span>  <span class="token comment">#    handler: cacheFirst</span>  <span class="token comment">#    options:</span>  <span class="token comment">#      origin: cdn.jsdelivr.net</span>  <span class="token comment">#  - urlPattern: /npm/*</span>  <span class="token comment">#    handler: cacheFirst</span>  <span class="token comment">#    options:</span>  <span class="token comment">#      origin: gcore.jsdelivr.net</span>  <span class="token comment">#  - urlPattern: /npm/*</span>  <span class="token comment">#    handler: cacheFirst</span>  <span class="token comment">#    options:</span>  <span class="token comment">#      origin: fastly.jsdelivr.net</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>部署<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">hexo c &amp;&amp; hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;由于&lt;code&gt;Hexo&lt;/code&gt;网站是部署在&lt;code&gt;GitHub&lt;/code&gt;上，国内访问速度很慢，需要加速访问&lt;/l</summary>
      
    
    
    
    <category term="网站加速" scheme="https://262617.xyz/categories/%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F/"/>
    
    
    <category term="网站加速" scheme="https://262617.xyz/tags/%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>Win11繁简体转化</title>
    <link href="https://262617.xyz/20221103/win11-fan-jian-ti-zhuan-hua/"/>
    <id>https://262617.xyz/20221103/win11-fan-jian-ti-zhuan-hua/</id>
    <published>2022-11-03T04:24:18.000Z</published>
    <updated>2024-01-10T07:22:31.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Win11繁简体转化"><a href="#Win11繁简体转化" class="headerlink" title="Win11繁简体转化"></a>Win11繁简体转化</h1><h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>windows的繁简体默认转化快捷键是 <code>ctrl + shift + f</code>,会与一些ide的全局搜索快捷键冲突。</p><p>于是我就把快捷键给关了，现在想繁体输出，去网上百度了下，本文记录下win11如何开关快捷键。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="1-打开设置"><a href="#1-打开设置" class="headerlink" title="1.打开设置"></a>1.打开设置</h4><h4 id="2-点击时间和语言"><a href="#2-点击时间和语言" class="headerlink" title="2.点击时间和语言"></a>2.点击时间和语言</h4><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211517486658.png" alt="image-20231221151748665"></p><h4 id="3-点击语言和区域"><a href="#3-点击语言和区域" class="headerlink" title="3.点击语言和区域"></a>3.点击语言和区域</h4><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211518529703.png" alt="image-20231221151852970"></p><h4 id="4-点击中文-简体-中国-右边的三个点，弹出框点击语言选项"><a href="#4-点击中文-简体-中国-右边的三个点，弹出框点击语言选项" class="headerlink" title="4.点击中文(简体,中国)右边的三个点，弹出框点击语言选项"></a>4.点击中文(简体,中国)右边的三个点，弹出框点击语言选项</h4><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211520210127.png" alt="image-20231221152021012"></p><h4 id="5-拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项"><a href="#5-拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项" class="headerlink" title="5.拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项"></a>5.拉到最底，点击微软拼音右边三个点，弹出框点击键盘选项</h4><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211523136786.png" alt="image-20231221152313678"></p><h4 id="6-点击按键"><a href="#6-点击按键" class="headerlink" title="6.点击按键"></a>6.点击按键</h4><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211524188985.png" alt="image-20231221152418898"></p><h4 id="7-拉到最底，找到热键繁简体切换"><a href="#7-拉到最底，找到热键繁简体切换" class="headerlink" title="7.拉到最底，找到热键繁简体切换"></a>7.拉到最底，找到热键繁简体切换</h4><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211525002384.png" alt="image-20231221152500238"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526223592.png" alt="image-20231221152622359"></p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/typora_imgs/image-202312211526495631.png" alt="image-20231221152649563"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Win11繁简体转化&quot;&gt;&lt;a href=&quot;#Win11繁简体转化&quot; class=&quot;headerlink&quot; title=&quot;Win11繁简体转化&quot;&gt;&lt;/a&gt;Win11繁简体转化&lt;/h1&gt;&lt;h2 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="win11, 繁体输出" scheme="https://262617.xyz/categories/win11-%E7%B9%81%E4%BD%93%E8%BE%93%E5%87%BA/"/>
    
    
    <category term="繁体输出, win11" scheme="https://262617.xyz/tags/%E7%B9%81%E4%BD%93%E8%BE%93%E5%87%BA-win11/"/>
    
  </entry>
  
  <entry>
    <title>关于指针的一些事儿</title>
    <link href="https://262617.xyz/20221103/c-zhi-zhen/"/>
    <id>https://262617.xyz/20221103/c-zhi-zhen/</id>
    <published>2022-11-03T04:24:18.000Z</published>
    <updated>2024-01-10T07:22:31.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针的基本概念"><a href="#指针的基本概念" class="headerlink" title="指针的基本概念"></a>指针的基本概念</h2><h3 id="1）变量的地址"><a href="#1）变量的地址" class="headerlink" title="1）变量的地址"></a>1）变量的地址</h3><p>变量是内存变量的简称，在C++中，系统会给变量分配一块内存，内存是有地址的。</p><table><thead><tr><th align="center">0x00000001</th></tr></thead><tbody><tr><td align="center">0x00000002</td></tr><tr><td align="center">0x00000003</td></tr><tr><td align="center">0x00000004</td></tr><tr><td align="center">0x00000005</td></tr><tr><td align="center">0x00000006</td></tr><tr><td align="center">0x00000007</td></tr><tr><td align="center">0x00000008</td></tr><tr><td align="center">0x00000009</td></tr><tr><td align="center">0x0000000A</td></tr><tr><td align="center">0x0000000B</td></tr><tr><td align="center">……</td></tr><tr><td align="center">0xFFFFFFFF</td></tr></tbody></table><p>C++用运算符&amp;获取变量在内存中的起始地址。</p><p>语法：<code>&amp;变量名</code></p><h3 id="2-指针变量"><a href="#2-指针变量" class="headerlink" title="2)指针变量"></a>2)指针变量</h3><p>指针变量简称指针，他是一种特殊的变量，专用于存放变量在内存中的<strong>起始地址</strong>。</p><p>语法：<code>数据类型 *变量名;</code></p><p>数据类型必须是合法的C++数据类型（int、char、double或其他自定义数据类型）。</p><p>星号*与乘法中的星号是相同的，但是，在这个场景中，星号用于表示这个变量是指针。</p><h3 id="3）对指针赋值"><a href="#3）对指针赋值" class="headerlink" title="3）对指针赋值"></a>3）对指针赋值</h3><p>不管是整型、浮点型、字符型，还是其他数据类型的变量，它的地址都是一个十六进制数。我们用整型指针存放整型变量的地址，用字符型指针存放字符型变量的地址，用浮点型指针存放浮点型变量的地址，用自定义数据类型指针存放自定义数据类型变量的地址。</p><p>语法：<code>指针=&amp;变量名;</code></p><h3 id="4-指针占用的内存"><a href="#4-指针占用的内存" class="headerlink" title="4)指针占用的内存"></a>4)指针占用的内存</h3><p>指针也是变量，是变量就要占用内存空间。</p><p>在64位操作系统中，不管什么类型的指针，占用内存都是8字节。</p><p>在C++中，指针是复合数据类型，复合数据类型是指基于其他类型而定义的数据类型，在程序中，int是整型变量，int *是整型指针类型，int *可以用于sizeof运算符，可以用于数据类型的强制转换，总的来说，把int *当成一种数据类型就对了。</p><h2 id="使用指针"><a href="#使用指针" class="headerlink" title="使用指针"></a>使用指针</h2><p>声明变量后，在没有赋值之前，里面是乱七八糟的值，这时候不能使用指针。</p><p>指针存放变量的地址，因此，指针名表示的是地址（就像变量名可以表示变量的值一样）。</p><p><em>运算符被称为<strong>间接值</strong>或<strong>解除引用（解引用）</strong>，将它用于指针，可以的得到该地址的内存中存储的值，</em>也是乘法符号，C++根据上下文来确定所指的是乘法还是解引用。</p><p>变量和指向变量的指针就像同一枚硬币的两面。</p><p><code>int no = 38;</code></p><p><code>int *ptr = &amp;no;</code></p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/20221025104337.jpg"></p><p>程序在存储数据的时候，必须跟踪三种基本属性：</p><ul><li>程序存储在哪里；</li><li>数据是什么类型；</li><li>数据的值是多少。</li></ul><p>用两种策略可以达到以上目的；</p><p>声明一个普通变量，声明时指出数据类型和变量名（符号名），系统在内部跟踪该内存单元。</p><p>声明一个指针变量，存储的值是地址，而不是值本身，程序直接访问该内存单元。</p><h2 id="指针用于函数的参数"><a href="#指针用于函数的参数" class="headerlink" title="指针用于函数的参数"></a>指针用于函数的参数</h2><p>如果把函数的形参声明为指针，调用的时候把实参地址传进去，形参中存放的是实参的地址，在函数中</p><p>通过解引用的方法直接操作内存中的数据，可以修改实数的值，这种方法被通俗的称为<strong>地址传递</strong>或<strong>传地址</strong>。</p><p><strong>值传递</strong>：函数的形参是普通变量。</p><p>传地址的意义如下：</p><ul><li>可以在函数中修改实参的值。</li><li>减少内存拷贝，提升性能。</li></ul><h2 id="使用常量"><a href="#使用常量" class="headerlink" title="使用常量"></a>使用常量</h2><p>常量是程序中固定不变的数据。</p><h3 id="1）宏常量"><a href="#1）宏常量" class="headerlink" title="1）宏常量"></a>1）宏常量</h3><p>一般在 main 函数的上面声明，用大写命名。</p><p>语法：<code>#define 常量名 值</code></p><h3 id="2）const修饰的变量"><a href="#2）const修饰的变量" class="headerlink" title="2）const修饰的变量"></a>2）const修饰的变量</h3><p>在程序的任何地方都可以声明。</p><p>语法：<code>const 数据类型 常量名 = 值</code></p><h3 id="3-常量的特点"><a href="#3-常量的特点" class="headerlink" title="3)常量的特点"></a>3)常量的特点</h3><p>程序中不允许改变常量的值，否则编译的时候会报错。</p><h3 id="4）示例"><a href="#4）示例" class="headerlink" title="4）示例"></a>4）示例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>    <span class="token comment">//包含头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MONTHS</span> <span class="token expression"><span class="token number">12</span>           </span><span class="token comment">//一年中的月份数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span>     <span class="token expression"><span class="token number">3.14159</span>      </span><span class="token comment">//圆周率</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>        <span class="token comment">//指定缺省的命名空间</span><span class="token comment">//main函数u，程序从这里开始执行，每个程序只能有一个 main 函数。</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> days <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment">//一星期的天数</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"一年有"</span> <span class="token operator">&lt;&lt;</span> MONTHS <span class="token operator">&lt;&lt;</span> <span class="token string">"个月"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用const修饰指针"><a href="#用const修饰指针" class="headerlink" title="用const修饰指针"></a>用const修饰指针</h2><h3 id="1）常量指针"><a href="#1）常量指针" class="headerlink" title="1）常量指针"></a>1）常量指针</h3><p>语法：<code>const 数据类型 *变量名;</code></p><p>不能通过解引用的方法修改内存地址中的值（用原始的变量名是可以修改的）。</p><p>注意：</p><ul><li>指向的变量（对象）可以改变（之前是指向变量a的，后来可以改为指向变量b）。</li><li>一般用于修饰函数的形参，表示不希望在函数里修改内存地址中的值。</li><li>如果用于形参、虽然指向的对象可以改变，但那么做没有任何意义。</li><li>如果形参的值不需要改变，建议加上const修饰，程序可读性更好。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//不能通过解引用赋值修改值，编译会报错 错误  C3892</span><span class="token comment">//*p = 13;</span><span class="token comment">//只能通过变量修改值</span>a <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">",*p="</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">",*p="</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> no<span class="token punctuation">,</span><span class="token keyword">const</span> string <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//参数加上const，解引用赋值,编译时 同样会报错</span>    <span class="token comment">//*no = 8;</span>    <span class="token comment">//*str = "我有一只小小鸟.";</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"亲爱的"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>no <span class="token operator">&lt;&lt;</span> <span class="token string">"号"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-指针常量"><a href="#2-指针常量" class="headerlink" title="2)指针常量"></a>2)指针常量</h3><p>语法：<code>数据类型 *const 变量名;</code></p><p>指向的变量（对象）不可改变。</p><p>注意：</p><ul><li>在定义的同时必须初始化，否则没有意义。</li><li>可以通过解引用的方法修改内存地址中的值。</li><li>C++编译器把指针常量做了一些特别的处理，改投换面之后，有了一个新的名字，叫做引用。</li></ul><h3 id="3）常指针常量"><a href="#3）常指针常量" class="headerlink" title="3）常指针常量"></a>3）常指针常量</h3><p>语法：<code>const 数据类型 *const 变量名;</code></p><p>指向的变量（对象）不可改变，不能通过解引用的方法修改内存地址中的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//常指针常量</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//既不能改变指针指向，也不能解引用改变值，下列两种写法都是错误的</span><span class="token comment">//*pa = 13;</span><span class="token comment">//pa = &amp;b;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量指针：指针指向可以改，指针指向的值不可以改。</p><p>指针常量：指针指向不可以改，指针的指向的值可以更改。</p><p>常指针常量：指针指向不可以改，指针指向的值不可以更改。</p><h2 id="void-关键字"><a href="#void-关键字" class="headerlink" title="void 关键字"></a>void 关键字</h2><p>在C++中，void表示为<strong>无类型</strong>，主要有三个用途：</p><ul><li><p>函数的返回值使用 <code>void</code> ，表示函数没有返回值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//函数体代码</span>     <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数的参数填 <code>void</code> ，表示函数不需要参数（或者让参数列表空着）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//函数体代码</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数的形参用 <code>void *</code>，表示接受任意数据类型的指针。</p><p>注意：</p><ul><li>不能用 <code>void</code>声明变量，它不能代表一个真实的变量。</li><li>不能对 <code>void *</code>指针直接解引用（需要转化为其他类型的指针）。</li><li>把其他类型的指针赋值给 <code>void *</code>指针不需要转换。</li><li>把 <code>void *</code>指针赋值给其他类型的指针需要转换。</li></ul></li></ul><h2 id="动态分配内存new和delete"><a href="#动态分配内存new和delete" class="headerlink" title="动态分配内存new和delete"></a>动态分配内存new和delete</h2><p>C++内存空间</p><p><img src="https://gcore.jsdelivr.net/gh/chauity/images/20221025192803.jpg"></p><p>使用堆区内存有四个步骤：</p><p>1）声明一个指针；</p><p>2）用new运算符向系统申请一块内存，让指针指向这块内存；</p><p>3）通过对指针的解引用的方法，像使用变量一样使用这块内存；</p><p>4）如果这块内存不用了，用delete运算符释放它；</p><p>申请内存的语法：<code>new 数据类型(初始值);</code> &#x2F;&#x2F;C++11支持 {}</p><p>如果申请成功，返回一个地址；如果申请失败，返回一个空地址（暂时不考虑失败的情况）</p><p>是否内存的语法：<code>delete 地址;</code></p><p>注意：</p><ul><li>动态分配出来的内存没有变量名，只能通过指向它的指针来操作内存中的数据。</li><li>如果动态分配的内存用不了，必须使用 <code>delete</code>释放它，否则可能用尽系统的内存。</li><li>动态分配的内存的生命周期与程序相同，程序退出时，如果没有是否，系统将自动回收。</li><li>就算指针的作用域已失效，所指向的内存也不会释放。</li><li>用指针跟踪已分配的内存时，不能跟丢。</li></ul><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h2><p><strong>指针</strong>是<strong>指针变量</strong>的简称，也是<strong>变量</strong>。是<strong>变量</strong>就有<strong>地址</strong>。</p><p><strong>指针</strong>用于存放<strong>普通变量</strong>的<strong>地址</strong>。</p><p><strong>二级指针</strong>用于存放<strong>指针变量</strong>的<strong>地址</strong>。</p><p>声明<strong>二级指针</strong>的语法：<code>数据类型** 指针名;</code></p><p>使用指针有两个目的：1）传递地址；2）存放动态分配的内存的地址。</p><p>在函数中，如果传递普通变量的地址，形参用指针；<strong>传递指针的地址，形参用二级指针</strong>。</p><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><p>在C++和C中，用0或NULL都可以表示空指针。</p><p>声明指针后，在赋值之前，让它指向空，表示没有任何地址。</p><h3 id="1）使用空指针的后果"><a href="#1）使用空指针的后果" class="headerlink" title="1）使用空指针的后果"></a>1）使用空指针的后果</h3><p><strong>如果对空指针解引用，程序会崩溃。</strong></p><p><strong>如果对空指针使用delete运算符，系统忽略该操作，不会出现异常。所以内存释放后，也应该把指针指向空。</strong></p><p>为什么空指针访问会出现异常？</p><p>NULL指针分配的分区：其范围是从 <code>0x00000000</code>到 <code>0x0000FFFF</code>。这段代码是空闲的，对于空闲的空间而言，没有相对应的物理存储器，与之相对应，所以对这段代码来说，任何读写操作都会引起异常的。空指针是程序无论在核实都没有物理存储器与之相对应的地址。为了保障“无论何时”这个条件，需要人为划分一个空指针的区域，固有上面NULL指针分区。</p><h3 id="2）C-11的nullptr"><a href="#2）C-11的nullptr" class="headerlink" title="2）C++ 11的nullptr"></a>2）C++ 11的nullptr</h3><p>用0和NULL表示空指针会产生歧义，C++11建议用 <code>nullptr</code>表示空指针，也就是 <code>（void *）0</code>。</p><p>NULL在C++中就是0，这是因为在C++中 <code>void *</code> 类型是不允许隐式转换成其他类型的，所以之前C++中用0来代表空指针，但是在重载整型的情况下，会出现上述的问题。所以C++11加入了nullptr，可以保证在任何情况下都代表空指针，而不会出现上述的情况，因此，建议用nullptr替代NULL，而NULL就当做0使用。</p><p><strong>注意：在Linux平台下，如果使用nullptr，编译要加 <code>-std=c++11</code>参数</strong></p><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h2><p>野指针就是指针指向的不是一个有效（合法）的地址。</p><p>在程序中，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。</p><p>出现野指针的情况主要有三种：</p><ul><li>1）指针在定义的时候，如果没有初始化，它的值是不确定的（乱指一气）。</li><li>2）如果指针指向了动态分配的内存，内存被释放后，指针不会置空，但是，指向的指针已失效。</li><li>3）指针指向的变量超越变量的作用域（变量的内存空间已被回收），作用域指的是是局部变量还是全局变量。</li></ul><p>规避方法：</p><ul><li><p>1）指针在定义的时候，如果没地方指，就初始化为nullptr。</p></li><li><p>2）动态分配的内存释放后，将其置位nullptr。</p></li><li><p>3）函数不要返回局部变量的地址。</p><p>注意：野指针的危害比空指针要大很多，如果访问野指针，<strong>可能</strong>会造成程序的崩溃。是可能，表示一定，程序的表现是<strong>不稳定</strong>，增加了调试的难度。</p></li></ul><h2 id="一维数组与指针"><a href="#一维数组与指针" class="headerlink" title="一维数组与指针"></a>一维数组与指针</h2><h3 id="1-指针的算术"><a href="#1-指针的算术" class="headerlink" title="1) 指针的算术"></a>1) 指针的算术</h3><ul><li>将一个整型变量加1后，其值将增加1。</li><li>但是，将指针变量（地址的值）加1后，增加的量等于它指向的数据类型的字节数。</li></ul><h3 id="2-数组的地址"><a href="#2-数组的地址" class="headerlink" title="2) 数组的地址"></a>2) 数组的地址</h3><ul><li>a) 数组在内存中占用的空间是连续的。</li><li>b) C++数组名解释为数组的第0个元素的地址。</li><li>c) 数组第0个元素的地址和数组首地址的取值是相同的。</li><li>d) 数组第n个元素的地址是：<code>数组首地址+n</code></li><li>e) C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li></ul><h3 id="3-数组的本质"><a href="#3-数组的本质" class="headerlink" title="3) 数组的本质"></a>3) 数组的本质</h3><ul><li>数组是占用连续空间的一块内存，数组名被解释为数组第0个元素的地址。C++操作内存有两种方法：数组解释法和指针表示法，他们说等价的。</li></ul><h3 id="4）数组名不一定会被解释为地址"><a href="#4）数组名不一定会被解释为地址" class="headerlink" title="4）数组名不一定会被解释为地址"></a>4）数组名不一定会被解释为地址</h3><ul><li>在多数情况下，C++将数组名解释成第0个元素的地址，但是，将sizeof运算符用于数组名，返回的是整个数组的内存空间的字节数。</li><li>可以修改指针的值，但数组是常量，不可修改。</li></ul><h2 id="一维数组用于函数的参数"><a href="#一维数组用于函数的参数" class="headerlink" title="一维数组用于函数的参数"></a>一维数组用于函数的参数</h2><h3 id="1）指针的数组表示"><a href="#1）指针的数组表示" class="headerlink" title="1）指针的数组表示"></a>1）指针的数组表示</h3><ul><li>在C++内部，用指针来处理数组。</li><li>C++编译器把 <code>数组名[下标]</code>解释为 <code>*(数组首地址+下标)</code></li><li>C++编译器把 <code>地址[下标]</code>解释为 <code>*(地址+下标)</code></li></ul><h3 id="2）一维数组用于函数的参数"><a href="#2）一维数组用于函数的参数" class="headerlink" title="2）一维数组用于函数的参数"></a>2）一维数组用于函数的参数</h3><ul><li><p>一维数组用于函数的参数时，只能传数组的地址，并且必须把数组长度也传进去，除非数组中有最后一个元素的标志。</p></li><li><p>书写的方法有两种：</p><p><code>void func(int* arr,int len)</code></p></li></ul><p>        <code>void func(int* arr[],int len)</code></p><ul><li><p>注意：</p><p>在函数中，可以用数组表示法，也可以用指针表示法。</p><p>在函数中，不要对指针名用sizeof运算符，由于64位操作系统指针大小是永远是8，并不是数组占用内存的大小。</p></li></ul><h2 id="用-new-动态创建一维数组"><a href="#用-new-动态创建一维数组" class="headerlink" title="用 new 动态创建一维数组"></a>用 new 动态创建一维数组</h2><p>普通数组在栈上分配内存，栈很小；如果需要存放更多的元素，必须在堆上分配内存。</p><p>动态创建一维数组的语法：<code>数据类型 *指针=new 数据类型[数组长度]</code>；</p><p>释放一维数组的语法：<code>delete []指针;</code></p><p>注意：</p><ul><li>动态创建的数组没有数组名，不能用 sizeof 运算符。</li><li>可以用数组比色法和指针表示法两种方式使用动态创建的数组。</li><li>必须使用<mark><code>delete[]</code></mark>来释放内存（不能只用 <code>delete</code>）。</li><li>不用用<mark><code>delete[]</code></mark>来释放不是<mark><code>new[]</code></mark>分配的内存。</li><li>不要用<mark><code>delete[]</code></mark>释放同一个内存块两次（否则等同于操作野指针）。</li><li>对空指针用<mark><code>delete[]</code></mark>是安全的（释放内存后，应该把指针置空nullptr）。</li><li>声明普通数组的时候，数组长度可以用变量，相当于在栈上动态创建数组，并且不需要释放。</li><li>如果内存不足，调用<mark><code>new</code></mark>会产生异常，导致程序终止；如果在new关键字后面加（<mark><code>std::nothrow</code></mark>）选项，则返回<mark><code>nullptr</code></mark>，不会产生异常。</li><li>为什么用<mark><code>delete[]</code></mark>释放数组的时候，不需要指定数组的大小？因为系统会自动跟踪分配的内存。</li></ul><h2 id="二维数组用于函数的参数"><a href="#二维数组用于函数的参数" class="headerlink" title="二维数组用于函数的参数"></a>二维数组用于函数的参数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span>      <span class="token comment">//整型指针。</span><span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//一维整型指针数组，元素是3个整型指针（p[0]、p[1]、p[2]）。</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//函数p的返回值类型是整型的地址。</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//p是函数指针，指针指向的函数具有两个int型的形参。函数的返回值是整型。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1）行指针（数组指针）"><a href="#1）行指针（数组指针）" class="headerlink" title="1）行指针（数组指针）"></a>1）行指针（数组指针）</h3><p>声明行指针的语法：<mark><code>数据类型 (*行指针名)[行的大小];   //行的大小即数组长度。</code></mark></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//行指针的举例</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//p1是行指针，用于指向数组长度为3的int型数组。</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//p2是行指针，用于指向数组长度为5的int型数组。</span><span class="token keyword">double</span><span class="token punctuation">(</span><span class="token operator">*</span>p3<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//p3是行指针，用于指向数组长度为5的double型数组。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一维数组名被解释为数组的第0个元素地址。</p><p>对一维数组名取地址得到的是数组的地址，是行地址。</p><h3 id="2）二维数组名是行地址"><a href="#2）二维数组名是行地址" class="headerlink" title="2）二维数组名是行地址"></a>2）二维数组名是行地址</h3><p><code>int bh[2][3] = &#123;&#123;11,12,13&#125;,&#123;21,22,23&#125;&#125;;</code></p><p>bh 是二维数组名，该数组有2元素，每一个元素又是一个<mark><code>数组长度为3的整型数组</code></mark>。</p><p>bh被解释为<mark><code>数组长度为三的整型数组</code></mark>类型的地址。</p><p>如果存放bh的值，要用<mark><code>数组长度为3的整型数组</code></mark>类型的指针。</p><p>int (*p)[3] &#x3D; bh</p><h3 id="3-把二维数组传递给函数"><a href="#3-把二维数组传递给函数" class="headerlink" title="3)把二维数组传递给函数"></a>3)把二维数组传递给函数</h3><p>如果要把bh传给函数，函数的声明如下：</p><p>void func(int (*p)[3],int len);</p><p>void func(int p[][3],int len);</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;指针的基本概念&quot;&gt;&lt;a href=&quot;#指针的基本概念&quot; class=&quot;headerlink&quot; title=&quot;指针的基本概念&quot;&gt;&lt;/a&gt;指针的基本概念&lt;/h2&gt;&lt;h3 id=&quot;1）变量的地址&quot;&gt;&lt;a href=&quot;#1）变量的地址&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="C语言, 指针" scheme="https://262617.xyz/tags/C%E8%AF%AD%E8%A8%80-%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
